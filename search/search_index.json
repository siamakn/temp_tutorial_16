{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"FAIRmat Tutorial 16: Getting started with NOMAD for materials-science research data management \u00b6 Date: February 26, 2025 Time: 13:00\u201316:00 CET Speakers: Adrianna Wojas, Ahmed Mansour, Siamak Nakhaie Location: Online Web: https://events.fairmat-nfdi.eu/event/34/ Slides and files: Download here In FAIRmat tutorial 16 , you'll learn how to use NOMAD to manage and organize your materials-science research data. Whether you are working with computational or experimental data, NOMAD's graphical user interface makes it easy to upload, share, explore, and analyze your data. We will also focus on using NOMAD to improve collaboration on your research projects and to ensure that your data align with the FAIR data principles (Findable, Accessible, Interoperable, and Reusable). What you'll do: \u00b6 \ud83c\udf10 Explore NOMAD entries and gain insights from the rich metadata structured in NOMAD's data model. \ud83d\udce5 Upload raw data files and inspect the extracted data structured in NOMAD\u2019s data model. \ud83d\uddc2\ufe0f Create a dataset and simulate publishing it with a DOI. \ud83d\udcd6 Document your research using NOMAD\u2019s built-in ELN templates. \ud83d\udee0\ufe0f Create custom ELN templates (demo). \ud83d\udee0\ufe0f Use the tabular parser for tabular data, such as .csv or .xls files (demo). At the end of this tutorial, you will be able to: \u00b6 Efficiently search, filter, and explore materials-science data in NOMAD. Manage, upload, and share your research data using NOMAD. Publish your datasets with DOIs to ensure accessibility and reusability . Use the NOMAD ELN functionality to document your research. Understand the essentials of creating custom templates and parsers for your research data.","title":"Home"},{"location":"index.html#fairmat-tutorial-16-getting-started-with-nomad-for-materials-science-research-data-management","text":"Date: February 26, 2025 Time: 13:00\u201316:00 CET Speakers: Adrianna Wojas, Ahmed Mansour, Siamak Nakhaie Location: Online Web: https://events.fairmat-nfdi.eu/event/34/ Slides and files: Download here In FAIRmat tutorial 16 , you'll learn how to use NOMAD to manage and organize your materials-science research data. Whether you are working with computational or experimental data, NOMAD's graphical user interface makes it easy to upload, share, explore, and analyze your data. We will also focus on using NOMAD to improve collaboration on your research projects and to ensure that your data align with the FAIR data principles (Findable, Accessible, Interoperable, and Reusable).","title":"FAIRmat Tutorial 16: Getting started with NOMAD for materials-science research data management"},{"location":"index.html#what-youll-do","text":"\ud83c\udf10 Explore NOMAD entries and gain insights from the rich metadata structured in NOMAD's data model. \ud83d\udce5 Upload raw data files and inspect the extracted data structured in NOMAD\u2019s data model. \ud83d\uddc2\ufe0f Create a dataset and simulate publishing it with a DOI. \ud83d\udcd6 Document your research using NOMAD\u2019s built-in ELN templates. \ud83d\udee0\ufe0f Create custom ELN templates (demo). \ud83d\udee0\ufe0f Use the tabular parser for tabular data, such as .csv or .xls files (demo).","title":"What you'll do:"},{"location":"index.html#at-the-end-of-this-tutorial-you-will-be-able-to","text":"Efficiently search, filter, and explore materials-science data in NOMAD. Manage, upload, and share your research data using NOMAD. Publish your datasets with DOIs to ensure accessibility and reusability . Use the NOMAD ELN functionality to document your research. Understand the essentials of creating custom templates and parsers for your research data.","title":"At the end of this tutorial, you will be able to:"},{"location":"T16_1/T16_1_search_and_filter.html","text":"placeholder for Search and filter","title":"T16 1 search and filter"},{"location":"T16_2/T16_2_explore_data_records.html","text":"Explore Data in NOMAD \u00b6 The EXPLORE menu allows you to navigate and search through a vast amount of materials-science data. Currently, the this menu offers several options for exploring data including: Entries : Search entries across all domains. Theory : Focus on calculations and materials data derived from theoretical models. Experiment : Explore data from experimental sources, such as ELNs (Electronic Lab Notebooks) or characterization techniques e.g., EELS (Electron Energy Loss Spectroscopy). Tools : Explore among several AI toolkit notebooks. Use Cases : Search data tailored to specific use cases, such Metal-Organic Frameworks (MOFs). Here we focus on searching data in NOMAD using the Entries option within the EXPLORE menu. You will see an overview of SOLAR CELLS . Exploring Entries in NOMAD \u00b6 To explore NOMAD, go to EXPLORE \u2192 Entries . The Entries page shows the latest uploaded data. Public entries are accessible without login, while logging in grants access to private and shared entries. Search Interface & Filters \u00b6 NOMAD supports advanced searches based on: Material \u2013 Elements, formula, or structure. Method \u2013 Scientific techniques (e.g., DFT). Properties \u2013 Band structure, conductivity, etc. Use Cases \u2013 Application-specific searches (e.g., Solar Cells). Origin \u2013 Filter by uploader, date, dataset, or tags. Filters refine searches dynamically. Example: Material Filter : Select B and N to find hexagonal boron nitride. Method Filter : Find BN simulations using VASP . Properties Filter : Search for entries with band structure data. You can pin frequently used filters using (+) for a customized search interface. Search Bar: A Quick Way to Explore Data \u00b6 The search bar helps locate filters efficiently. Typing a keyword suggests related filters. Does NOMAD have a bandgap filter? Can you find a filter for bandgap? Does it provide the bandgap value or indicate direct/indirect nature? Hint Try variations like \"bandgap\" , \"band gap\" , or \"band_gap\" . Search for \"direct\" or \"indirect\" to explore bandgap characteristics. Custom Widgets for Advanced Searches \u00b6 NOMAD enables searching entries using rich metadata. Some metadata is extracted automatically, while others are user-provided via schemas. Only metadata stored according to schemas is searchable. NOMAD also offers custom widgets to create advanced dashboards. These widgets are accessible below the search bar on any EXPLORE page. Here are the main four widgets: TERMS: Visualize and explore categorical data based on user-defined terms and keywords. HISTOGRAM: Display the distribution of a specific numerical quantity within data. SCATTER PLOT: Generate scatter plots to visualize relationships between different quantities. PERIODIC TABLE: Filter data by selecting elements directly from an interactive periodic table. Example 1: Finding Alternative ETL Materials for Perovskite Solar Cells \u00b6 In the following, we'll walk you through an example to help you better understand how to use these widgets. Imagine we are working on solar cell research and have fabricated solar cell devices using the absorber material 'CsPbBrI' (Cesium Lead Bromine Iodide), a mixed halide perovskite. The device's structure is illustrated below: The Device: \u00b6 Contact: Au HTL (Hole Transport Layer): Spiro-OMeTAD (C81\u200bH68\u200bN4\u200bO8\u200b) Perovskite Absorber: CsPbBrI ETL (Electron Transport Layer): TiO2-c (compact Titanium Dioxide) Contact: FTO (Fluorine-doped Tin Oxide) Substrate: SLG (Soda Lime Glass) Now, we want to answer the following research question: What ETL materials can replace TiO2-c to improve Voc (open circuit voltage) in perovskite solar cells? To gain insights into this question, we can utilize NOMAD's widgets to explore relevant data: Start with the Periodic Table : Click on the PERIODIC TABLE widget button and use the (+) button to pin it to the dashboard. Select the elements of the absorber from the periodic table: Cs, Pb, Br, and I. After selecting these elements, you should see approximately 7,500 entries matching your search filters. Use the TERMS Widget : To find out what ETL and HTL materials are used in the available data, click on the TERMS widget button. For the X-axis, type 'electron transport layer'. As you type, suggestions will appear. Choose results.properties.optoelectronic.solar_cell.electron_transport_layer . Set the statistics scaling to linear, give the widget a descriptive title like \"ETL\", and pin it to the dashboard. Repeat the process for the HTL materials. Create a Scatter Plot : Click on the SCATTER PLOT widget button to visualize the relationship between open circute voltage (Voc), short circuit current density (Jsc), and efficiency. Set the X-axis to \"Open Circuit Voltage (V)\", the Y-axis to \"Efficiency\", and use the marker color to represent \"Short Circuit Current Density\". The scatter plot will allow you to explore the data interactively. Interpreting Results \u00b6 Interactive scatter plots reveal relationships between ETLs, HTLs, and performance . Hover over data points for details. Click entries for full metadata, dataset links, and publication info . Custom widgets provide a powerful way to explore NOMAD data and answer research questions efficiently. Example 2: Exploring Sn-Based Solar Cells \u00b6 Let\u2019s explore how hole transport layer (HTL) materials affect efficiency in Sn-based solar cells with C60 as the electron transport layer (ETL). Step 1: Open the Perovskite Solar Cell Database Dashboard \u00b6 Navigate to EXPLORE \u2192 Solar Cells \u2192 Perovskite Solar Cells Database . This dashboard provides predefined filters and plots optimized for solar cell research. Step 2: Understand the Dashboard \u00b6 The dashboard includes: - Periodic Table \u2013 Filter materials by elements. - Scatter Plots \u2013 Explore efficiency vs. Voc , Jsc , and device architecture . - Histograms \u2013 Analyze bandgap and illumination intensity. - TERMS Plots \u2013 Categorize fabrication method , device stack , ETL , and HTL materials. Step 3: Apply Filters \u00b6 Select Sn in the Periodic Table to filter Sn-based absorbers. Set ETL = C60 in the TERMS plot. (~400 entries remain) Narrow results further using: Bandgap slider (e.g., >1.3 eV). Device architecture scatter plot (e.g., pin). Step 4: Customize Widgets \u00b6 Click the pen icon on any widget to modify its plotted quantities, color mapping, or units. Step 5: Explore and Analyze Results \u00b6 Hover over scatter plots to inspect data points. Click entries for full metadata, dataset links, and further analysis.","title":"Explore NOMAD entries"},{"location":"T16_2/T16_2_explore_data_records.html#explore-data-in-nomad","text":"The EXPLORE menu allows you to navigate and search through a vast amount of materials-science data. Currently, the this menu offers several options for exploring data including: Entries : Search entries across all domains. Theory : Focus on calculations and materials data derived from theoretical models. Experiment : Explore data from experimental sources, such as ELNs (Electronic Lab Notebooks) or characterization techniques e.g., EELS (Electron Energy Loss Spectroscopy). Tools : Explore among several AI toolkit notebooks. Use Cases : Search data tailored to specific use cases, such Metal-Organic Frameworks (MOFs). Here we focus on searching data in NOMAD using the Entries option within the EXPLORE menu. You will see an overview of SOLAR CELLS .","title":"Explore Data in NOMAD"},{"location":"T16_2/T16_2_explore_data_records.html#exploring-entries-in-nomad","text":"To explore NOMAD, go to EXPLORE \u2192 Entries . The Entries page shows the latest uploaded data. Public entries are accessible without login, while logging in grants access to private and shared entries.","title":"Exploring Entries in NOMAD"},{"location":"T16_2/T16_2_explore_data_records.html#search-interface-filters","text":"NOMAD supports advanced searches based on: Material \u2013 Elements, formula, or structure. Method \u2013 Scientific techniques (e.g., DFT). Properties \u2013 Band structure, conductivity, etc. Use Cases \u2013 Application-specific searches (e.g., Solar Cells). Origin \u2013 Filter by uploader, date, dataset, or tags. Filters refine searches dynamically. Example: Material Filter : Select B and N to find hexagonal boron nitride. Method Filter : Find BN simulations using VASP . Properties Filter : Search for entries with band structure data. You can pin frequently used filters using (+) for a customized search interface.","title":"Search Interface &amp; Filters"},{"location":"T16_2/T16_2_explore_data_records.html#search-bar-a-quick-way-to-explore-data","text":"The search bar helps locate filters efficiently. Typing a keyword suggests related filters. Does NOMAD have a bandgap filter? Can you find a filter for bandgap? Does it provide the bandgap value or indicate direct/indirect nature? Hint Try variations like \"bandgap\" , \"band gap\" , or \"band_gap\" . Search for \"direct\" or \"indirect\" to explore bandgap characteristics.","title":"Search Bar: A Quick Way to Explore Data"},{"location":"T16_2/T16_2_explore_data_records.html#custom-widgets-for-advanced-searches","text":"NOMAD enables searching entries using rich metadata. Some metadata is extracted automatically, while others are user-provided via schemas. Only metadata stored according to schemas is searchable. NOMAD also offers custom widgets to create advanced dashboards. These widgets are accessible below the search bar on any EXPLORE page. Here are the main four widgets: TERMS: Visualize and explore categorical data based on user-defined terms and keywords. HISTOGRAM: Display the distribution of a specific numerical quantity within data. SCATTER PLOT: Generate scatter plots to visualize relationships between different quantities. PERIODIC TABLE: Filter data by selecting elements directly from an interactive periodic table.","title":"Custom Widgets for Advanced Searches"},{"location":"T16_2/T16_2_explore_data_records.html#example-1-finding-alternative-etl-materials-for-perovskite-solar-cells","text":"In the following, we'll walk you through an example to help you better understand how to use these widgets. Imagine we are working on solar cell research and have fabricated solar cell devices using the absorber material 'CsPbBrI' (Cesium Lead Bromine Iodide), a mixed halide perovskite. The device's structure is illustrated below:","title":"Example 1: Finding Alternative ETL Materials for Perovskite Solar Cells"},{"location":"T16_2/T16_2_explore_data_records.html#the-device","text":"Contact: Au HTL (Hole Transport Layer): Spiro-OMeTAD (C81\u200bH68\u200bN4\u200bO8\u200b) Perovskite Absorber: CsPbBrI ETL (Electron Transport Layer): TiO2-c (compact Titanium Dioxide) Contact: FTO (Fluorine-doped Tin Oxide) Substrate: SLG (Soda Lime Glass) Now, we want to answer the following research question: What ETL materials can replace TiO2-c to improve Voc (open circuit voltage) in perovskite solar cells? To gain insights into this question, we can utilize NOMAD's widgets to explore relevant data: Start with the Periodic Table : Click on the PERIODIC TABLE widget button and use the (+) button to pin it to the dashboard. Select the elements of the absorber from the periodic table: Cs, Pb, Br, and I. After selecting these elements, you should see approximately 7,500 entries matching your search filters. Use the TERMS Widget : To find out what ETL and HTL materials are used in the available data, click on the TERMS widget button. For the X-axis, type 'electron transport layer'. As you type, suggestions will appear. Choose results.properties.optoelectronic.solar_cell.electron_transport_layer . Set the statistics scaling to linear, give the widget a descriptive title like \"ETL\", and pin it to the dashboard. Repeat the process for the HTL materials. Create a Scatter Plot : Click on the SCATTER PLOT widget button to visualize the relationship between open circute voltage (Voc), short circuit current density (Jsc), and efficiency. Set the X-axis to \"Open Circuit Voltage (V)\", the Y-axis to \"Efficiency\", and use the marker color to represent \"Short Circuit Current Density\". The scatter plot will allow you to explore the data interactively.","title":"The Device:"},{"location":"T16_2/T16_2_explore_data_records.html#interpreting-results","text":"Interactive scatter plots reveal relationships between ETLs, HTLs, and performance . Hover over data points for details. Click entries for full metadata, dataset links, and publication info . Custom widgets provide a powerful way to explore NOMAD data and answer research questions efficiently.","title":"Interpreting Results"},{"location":"T16_2/T16_2_explore_data_records.html#example-2-exploring-sn-based-solar-cells","text":"Let\u2019s explore how hole transport layer (HTL) materials affect efficiency in Sn-based solar cells with C60 as the electron transport layer (ETL).","title":"Example 2: Exploring Sn-Based Solar Cells"},{"location":"T16_2/T16_2_explore_data_records.html#step-1-open-the-perovskite-solar-cell-database-dashboard","text":"Navigate to EXPLORE \u2192 Solar Cells \u2192 Perovskite Solar Cells Database . This dashboard provides predefined filters and plots optimized for solar cell research.","title":"Step 1: Open the Perovskite Solar Cell Database Dashboard"},{"location":"T16_2/T16_2_explore_data_records.html#step-2-understand-the-dashboard","text":"The dashboard includes: - Periodic Table \u2013 Filter materials by elements. - Scatter Plots \u2013 Explore efficiency vs. Voc , Jsc , and device architecture . - Histograms \u2013 Analyze bandgap and illumination intensity. - TERMS Plots \u2013 Categorize fabrication method , device stack , ETL , and HTL materials.","title":"Step 2: Understand the Dashboard"},{"location":"T16_2/T16_2_explore_data_records.html#step-3-apply-filters","text":"Select Sn in the Periodic Table to filter Sn-based absorbers. Set ETL = C60 in the TERMS plot. (~400 entries remain) Narrow results further using: Bandgap slider (e.g., >1.3 eV). Device architecture scatter plot (e.g., pin).","title":"Step 3: Apply Filters"},{"location":"T16_2/T16_2_explore_data_records.html#step-4-customize-widgets","text":"Click the pen icon on any widget to modify its plotted quantities, color mapping, or units.","title":"Step 4: Customize Widgets"},{"location":"T16_2/T16_2_explore_data_records.html#step-5-explore-and-analyze-results","text":"Hover over scatter plots to inspect data points. Click entries for full metadata, dataset links, and further analysis.","title":"Step 5: Explore and Analyze Results"},{"location":"T16_3/T16_3_upload_raw_data_files.html","text":"The key elements in NOMAD To get started in the journey of uploading raw files to publishing datasets with DOI in NOMAD, you will need to understand the key elements of this process in NOMAD: NOMAD Users Uploads Entries Datasets In order to upload data into NOMAD, a user account is required. You can create a user account by following these steps . All files and data created by users are organized in NOMAD as Uploads , which function as directories within the user\u2019s account. You can create an upload for each project and structure it into nested folder directories for better organization. Research data in the form of raw files are added to uploads. If NOMAD has a built-in parser for the file formats, it automatically processes the files and creates Entries . These entries represent structured data extracted from the raw files. Entries can be grouped into Datasets , which allow for better organization of related data. Once the dataset is complete, it can be published with a DOI, making the research data findable, accessible, interoperable, and reusable (FAIR). Key features of NOMAD Uploads Creation: Uploads are created and managed by users. Structure: Uploads are associated to a user account and are listed in the my uploads page in the GUI. They serve as containers for multiple files and entries, preserving their directory structure and metadata. Organization: Each upload can contain multiple files organized into directories. Sharing & Publishing: Entries and files can only be shared, transferred, or published as complete uploads. Key features of NOMAD Entries Creation: Entries are automatically generated by NOMAD from uploaded raw files or instantiated schemas. Structure: Entries are distinct data entities that can be searched and viewed through dedicated pages in the NOMAD GUI. Organization: Entries belong to specific uploads and are linked to a raw file that NOMAD has recognized and parsed. Sharing & Publishing: Entries can be shared as part of an upload, and individual entries can be added to datasets, which can be published with a DOI. Key features of NOMAD Datasets Creation: Datasets are created and managed by users. Structure: Datasets are associated to a user account and are listed in the Your datasets page in the GUI. They serve as containers for curated and related data entires. Organization: Datasets conatins several entries from various uploads. One entry can be contained in many dataset. Sharing & Publishing: Datasets are published independent of uploads and you can get a DOI for your datasets. For more detailed explanation, you can refer to the NOMAD documentation page . Task 1: Create new upload \u00b6 The uploads exist in the Your uploads page. You can reach there by clicking on Uploads in the PUBLISH menu. Here you can view a list of all your uploads with their relevant information. You can also create new uploads or add an example upload prepared by others. To create a new upload, click on the CREATE A NEW UPLOAD button. A new page will open and an upload ID will be automatically assigned. Two different views of the upload page At the very top of the upload page, you can toggle between two different views for this page: Overview: This view includes all the tools needed to manage your upload, along with guided steps to start uploading your files to NOMAD. It will also show all the processed files (entries) that you will upload. Files: This view shows all the files included in upload, whether they are raw files or processed files. You can also organize these files into folders as needed. When you create a new upload, it is automatically assigned the default name unnamed upload . To rename it, click on the icon next to the name. This will make the name field editable, allowing you to enter a clear and descriptive name. Once you're done, click SAVE to apply the changes. Task 2: Share your upload with a colleague \u00b6 Uploads in NOMAD can be shared and published. When you share/publish an upload, all included entries and files will be shared/published. What is the difference between sharing and publishing an Upload? Sharing an upload allows you to grant access to colleagues or collaborators while working on it. This facilitates collaboration on projects or enables progress reviews during the project. You can invite individuals with either read/write access (coauthors) or read-only access (reviewers). Publishing an upload makes it searchable, findable, and accessible on NOMAD for everyone. Once published, the upload becomes immutable, meaning its contents can no longer be modified. You also have the option to publish with an embargo period, temporarily restricting public access until the embargo expires. A NOMAD upload can have four states based on sharing and publishing: Status Icon Description Private The upload is private and is visible to the uploader only. Shared The upload is accessible to selected users but not publicly available. Published The upload is publicly available to everyone. Visible The upload is unpublished but accessible to everyone. You can manage upload sharing in the Edit upload members menu. To access it, click on available on the top of the upload page. at the top of the upload page. Alternatively, you can click the EDIT UPLOAD MEMBERS button below the list of entries on your upload page. Share your upload Step 1: Open the Edit upload members window, but clicking on the EDIT UPLOAD MEMBERS button. Step 2: Start typing the name of the NOMAD user you want to share the upload with. A list of matching users will appear\u2014select the correct name from the list. Step 3: Assign a role to the user by selecting either Coauthor or Reviewer from the dropdown menu. - Coauthors can edit and add files to the upload. - Reviewers can only view the contents of the upload (no editing rights). Step 4: Click on submit . Make your upload visible to everyone To make your upload visible to everyone on NOMAD, simply check the box in the Edit visibility and access section, located under the list of your entries. This setting allows all users, including guests without an account, to view the upload even before it is published. You can still modify the upload\u2019s access settings and edit its contents while it remains visible. Publish your upload Once an upload is published, it can not be deleted, and the files and entries can not be changed Step 1: Select an embargo period (if needed) from the dropdown menu, located in the publish section located at the bottom of the upload page. If you would like to publish immediatly, select No embargo . Step 2: Click on the PUBLISH button. Step 3: A prompt for confirmation appears on the screen. Click on PUBLISH. Having an embarog on your data means: - Raw files and entries remain hidden, except to you and users you share the data with. - Some metadata (e.g., chemical formula, system type, spacegroup) will be public. - Embargoed entires can be added to datasets and be assigned DOIs. - The embargo can be lifted eariler than the assigned duration by the user. The following image shows an example of an embargoed upload and the option to lift the embargo by clicking the LIFT EMBARGO button. Task 3: Add files to your upload \u00b6 Lets start adding files to your NOMAD upload. We will explore three different examples: Miscellaneous Files. Files of DFT calculation on Iron(III) Oxide. Files of x-ray photoelectron spectroscopy (XPS) measurement on polymers. Files can be added to an upload individually, or you can group them into a compressed file in .zip or .tar formats. Different ways and senarious to upload files to NOMAD In NOMAD, files can be uploaded in different ways, but whether they are processed into Entries or not depends on their format and NOMAD\u2019s built-in parsers. Here\u2019s how it works: Files that are processed by NOMAD These are files that are recognized by NOMAD, meaning that a built-in parser exists for the file you uploaded, the file will be processed according to a data schemas. It means that NOMAD reads the file, extracts data and organizes them based on the data schema which allows for generating visualizations, and analysis automations. Raw files that are processed in NOMAD become Entries This is common for simulation files since they follow standardized structures. Also a variety of experimental data organized in NeXus format .nxs are recognized by NOMAD. Files that are not processed by NOMAD These are files that do not have a built-in parser , meaning NOMAD cannot automatically extract and structure their data. They are still stored in NOMAD as part of your upload, and can be downloaded or shared, but they do not become entries in the database. NOMAD allows you to preview common file formats that are not automatically parsed. This means you can view the contents of the file directly within the platform without having to download it. Examples include: .txt , .csv , .pdf , .png , .jpg . Task 3.1: Uploading miscellaneous files \u00b6 Download the example files for this excercise We have prepared a set of files for this task that can be downloaded from this link . Download the folder, then uncompress it on your local machine at you preferred directory. The folder contains files of the following formats: .zip , .pdf , .jpg , .txt , and .csv . file name format description FAIRmat_graphics .zip Compressed file that contains several FAIRmat logos in .png format JOSS_2023 .pdf A publication of NOMAD in the Journal of Open Source Software Nature_2022 .pdf A publication of FAIRmat in Nature journal P3HT_optical_absorption .csv Results of absorption measurement on P3HT from PerkinElmer spectrometer note_properties_of_good_dopants .txt Notes recorded during a conference talk experiment_polymer_doping .jpg A photograph of an experiment of preparing doped polymer solutions Note that these files will not create entires in NOMAD, because a built-in parser for them doesn't exist. They will be stored in your upload and can be accessed and shared with your colleagues, however, they will not be searchable within NOMAD. In this case, NOMAD acts as a typical storage cloud! You can add these files to your NOMAD upload. Do so by simply drag and drop the file or by opening the dialog to browse the files in your device. Uploading images, pdf files, text files, and tabular data Drag and drop Start with uploading the file FAIRmat_graphics.zip . Lets use the drag and drop method as shown in the animation below. When a compressed file is uploaded to NOMAD, it will be extracted automatically and the included files will be added to your upload. Open the file browser dialog Upload the remaining files using the file browser dialog as shown in the animation below. Task 3.2: Uploading computations data files \u00b6 Download the example files for this excercise We have prepared a set of files for this task that can be downloaded from this link . Download the folder to your local machine at you preferred directory. This folder contains the input and output files of a DFT calculation for Iron(III) Oxide using the FHI-aims code. FHI-aims* an all-electron density-functional-theory package that employs numeric atom-centered basis functions. It is designed for accurate and efficient simulations of molecules, clusters, surfaces, and bulk materials across the periodic table. Its advanced treatment of electronic structure allows for precise calculations of material properties, including band structures, total energies, and magnetic properties. More information in this link The calculations in this example were preformed using a code that is supported by NOMAD, i.e. the FHI-aims code. NOMAD has a parser for the FHI-aims code. This means it will create an Entry for these data. In other words, NOMAD will read the input and output files and provide all information in NOMAD's unified metainfo data schema. Uploading input and output files .zip of a DFT calculation Uploading the files Start with uploading the file FHI-aims.zip . Lets use the drag and drop method as shown in the animation below. After uploading files, processing is automatically triggered. This involves identifying supported file formats in NOMAD and extracting relevant (meta)data. The exact processing steps depend on the use case. For example, you can learn more about the processing of computational data on this link . Once processing is complete, NOMAD generates an Entry page that presents the data in a structured, hierarchical format based on the NOMAD metainfo schema. Opening and exploring your Entry To go to the entry page, click on the icon next to the entry. Here you can view the metadata and useful visulaization of your data, check the uploaded files, and explore your entry in details. OVERVIEW tab: 1- On the left, core metadata are displayed. 2- On the right, various cards present the available information. The cards you see depend on the properties or data available for that entry. For FHI-aims files, three main cards appear in the overview page: Materials card: shows key information and visulization of the composition and conventional cell. Electronic properties card: shows the calculated band structure, density of states, and Brillouin zone. Workflow Graph card: illustrates the various steps in the calculation, including their inputs and outputs. FILES tab: This tab shows the uploaded files. NOMAD lists all files in the same directory, as they usually belong together. DATA tab: Also known as the \"processed data\" tab, this shows the results of the parsing and normalization process done by NOMAD. NOMAD puts all the data in a unified, hierarchical, and machine-processable format, following the NOMAD metainfo. Task 3.3: Uploading experiments data files \u00b6 Download the example files for this excercise We have prepared a set of files for this task that can be downloaded from this link . Download the folder, then uncompress it to your local machine at you preferred directory. This folder contains files related to an x-ray photoelectron spectroscopy (XPS) on the polymer PBTTT using SPECS spectrometer. It contains the data file in two different formats ( .nxs and .xml ), in addtion to an electronic lab notebook (ELN) file ( .yaml ) documenting additional details of the experiment. file name format description PBTTT_XPS_SPECS .nxs XPS data file in the standard NeXuS file format PBTTT_XPS_SPECS_raw .xml XPS data in a raw file format as produced by the spectrometer ELN_data_xml .yaml An ELN file used to record additional metadata of the experiment NOMAD supports experimental data files in the .nxs format. These files can be uploaded directly to NOMAD, where they are processed, and structured Entries are created. Uploading experimental data in the .nxs format Uploading the file Start with uploading the file PBTTT_XPS_SPECS.nxs . Lets use the drag and drop method as shown in the animation below. After uploading files, processing is automatically triggered. This involves identifying supported file formats in NOMAD and extracting relevant (meta)data. The exact processing steps depend on the use case. Once processing is complete, NOMAD generates an Entry page that presents the data in a structured, hierarchical format based on the NOMAD metainfo schema. Opening and exploring the Entry Click on the icon next to an entry navigates you to the respective entry page. Here you can view the metadata and useful visulaization of your data, check the uploaded files, and explore your entry in details. OVERVIEW Tab: 1- On the left, core metadata are displayed. 2- On the right, various cards present the available information. The cards you see depend on the properties or data available for that entry. For .nxs files, two main cards appear in the overview page: the data viewer and the materials card. FILES Tab: This tab shows the uploaded files. NOMAD lists all files in the same directory, as they usually belong together. DATA Tab: Also known as the \"processed data\" tab, this shows the results of the parsing and normalization process done by NOMAD. NOMAD puts all the data in a unified, hierarchical, and machine-processable format, following the NOMAD metainfo. Most scientific instruments generate experimental results in formats other than .nxs . NOMAD still supports these files by providing a conversion process using the NexusDataConverter built-in schema, which transforms raw data into the .nxs format. NexusDataConverter readers and the NeXuS application definitions A Reader is a program designed to interpret and extract data from a specific experimental technique or file format. The reader understands the structure and encoding of the particular data format and provides methods for accessing its contents in a programmatically friendly way. It acts as a bridge between raw experimental data and NOMAD by converting the data into the structured file format according to domain-specific application definitions. A list of available readers can be found here A NeXus application definition provides a structured specification of the terms and metadata required in an .nxs data file for a particular scientific application. These definitions outline the minimum set of terms that must be included in the data file for it to be considered valid according to the NeXus format. A list of NeXuS application definitions developed by FAIRmat can be found here NexusDataConverter uses readers to interpret the raw data files, and then structures them according to the outlines of the application definitions In the following examples, you will learn how to upload a raw file from a SPECS instrument in .xml format by using the NexusDataConverter . You will do this in two ways: Uploading only the raw file. Uploading both the raw file and an ELN file, enriching your data with metadata and ensuring compliance with community standards. Uploading experimental data in the .xml format Step 1: Click on the CREATE FROM SCHEMA button in your upload page. Step 2: In the create new entry from schema window, click on the drop-down menu of the built-in schema, and select NexusDataConverter Step 3: Give a descriptive name for the entry. Step 4: Click on CREATE. This will take you the NexusDataConverter Entry page. Step 5: From the reader drop-down menu, choose the approperiate reader for your files. For this exercise select xps . Step 6: From the nxdl drop-down menu, choose the approperiate application definition for your experiment. For this exercise select NXxps Step 7: Upload the raw data file PBTTT_XPS_SPECS_raw.xml . Step 8: Give a descriptive name for the generated .nxs file. Step 9: Click on the save icon to start the conversion process. Check the overview page of your upload. There you will fine two newly created entries; one for the NexusDataConverter and one for the generated .nxs file from you your raw file. NOMAD still stores your .xml raw file in the upload directory. Uploading experimental data in the .xml format with additional ELN data Often, raw files generated by instruments from various vendors lack complete metadata and essential details about the experiment. To address this, scientists document all experimental details in an Electronic Lab Notebook (ELN). Combining data from raw files with information from ELNs ensures that experiments are comprehensively described with rich metadata and conform to community standards. NOMAD\u2019s NexusDataConverter allows you to merge experimental raw data files with ELN entries in .yaml format, producing .nxs files that meet community standards and ensure your data are richly-described. The ELN .yaml file can be generated by various ELN software tools or created manually using a text editor. For each supported experimental raw file format, FAIRmat provides a template ELN .yaml file containing all necessary attributes and parameters to complement the raw file\u2019s data. These templates can be found here While these files can be edited with any text editor, we recommend using VS Code for an optimized editing experience. Open the eln_data_xml.yaml file and edit its contents Modify the start_time and end_time of your experiment. Write your information in the users section. Explore the other fields available in the ELN file. Save the file. Upload your data file .xml and your ELN data .yaml using NexusDataConverter Step 1: Click on the CREATE FROM SCHEMA button in your upload page. Step 2: In the create new entry from schema window, click on the drop-down menu of the built-in schema, and select NexusDataConverter Step 3: Give a descriptive name for the entry. Step 4: Click on CREATE. This will take you the NexusDataConverter Entry page. Step 5: From the reader drop-down menu, choose the approperiate reader for your files. For this exercise select xps . Step 6: From the nxdl drop-down menu, choose the approperiate application definition for your experiment. For this exercise select NXxps Step 7: Upload the raw data file PBTTT_XPS_SPECS_raw.xml as well as the ELN data file eln_data_xml.yaml . Step 8: Give a descriptive name for the generated .nxs file. Step 9: Click on the save icon to start the conversion process.","title":"Upload Raw Data Files"},{"location":"T16_3/T16_3_upload_raw_data_files.html#task-1-create-new-upload","text":"The uploads exist in the Your uploads page. You can reach there by clicking on Uploads in the PUBLISH menu. Here you can view a list of all your uploads with their relevant information. You can also create new uploads or add an example upload prepared by others. To create a new upload, click on the CREATE A NEW UPLOAD button. A new page will open and an upload ID will be automatically assigned. Two different views of the upload page At the very top of the upload page, you can toggle between two different views for this page: Overview: This view includes all the tools needed to manage your upload, along with guided steps to start uploading your files to NOMAD. It will also show all the processed files (entries) that you will upload. Files: This view shows all the files included in upload, whether they are raw files or processed files. You can also organize these files into folders as needed. When you create a new upload, it is automatically assigned the default name unnamed upload . To rename it, click on the icon next to the name. This will make the name field editable, allowing you to enter a clear and descriptive name. Once you're done, click SAVE to apply the changes.","title":"Task 1: Create new upload"},{"location":"T16_3/T16_3_upload_raw_data_files.html#task-2-share-your-upload-with-a-colleague","text":"Uploads in NOMAD can be shared and published. When you share/publish an upload, all included entries and files will be shared/published. What is the difference between sharing and publishing an Upload? Sharing an upload allows you to grant access to colleagues or collaborators while working on it. This facilitates collaboration on projects or enables progress reviews during the project. You can invite individuals with either read/write access (coauthors) or read-only access (reviewers). Publishing an upload makes it searchable, findable, and accessible on NOMAD for everyone. Once published, the upload becomes immutable, meaning its contents can no longer be modified. You also have the option to publish with an embargo period, temporarily restricting public access until the embargo expires. A NOMAD upload can have four states based on sharing and publishing: Status Icon Description Private The upload is private and is visible to the uploader only. Shared The upload is accessible to selected users but not publicly available. Published The upload is publicly available to everyone. Visible The upload is unpublished but accessible to everyone. You can manage upload sharing in the Edit upload members menu. To access it, click on available on the top of the upload page. at the top of the upload page. Alternatively, you can click the EDIT UPLOAD MEMBERS button below the list of entries on your upload page. Share your upload Step 1: Open the Edit upload members window, but clicking on the EDIT UPLOAD MEMBERS button. Step 2: Start typing the name of the NOMAD user you want to share the upload with. A list of matching users will appear\u2014select the correct name from the list. Step 3: Assign a role to the user by selecting either Coauthor or Reviewer from the dropdown menu. - Coauthors can edit and add files to the upload. - Reviewers can only view the contents of the upload (no editing rights). Step 4: Click on submit . Make your upload visible to everyone To make your upload visible to everyone on NOMAD, simply check the box in the Edit visibility and access section, located under the list of your entries. This setting allows all users, including guests without an account, to view the upload even before it is published. You can still modify the upload\u2019s access settings and edit its contents while it remains visible. Publish your upload Once an upload is published, it can not be deleted, and the files and entries can not be changed Step 1: Select an embargo period (if needed) from the dropdown menu, located in the publish section located at the bottom of the upload page. If you would like to publish immediatly, select No embargo . Step 2: Click on the PUBLISH button. Step 3: A prompt for confirmation appears on the screen. Click on PUBLISH. Having an embarog on your data means: - Raw files and entries remain hidden, except to you and users you share the data with. - Some metadata (e.g., chemical formula, system type, spacegroup) will be public. - Embargoed entires can be added to datasets and be assigned DOIs. - The embargo can be lifted eariler than the assigned duration by the user. The following image shows an example of an embargoed upload and the option to lift the embargo by clicking the LIFT EMBARGO button.","title":"Task 2: Share your upload with a colleague"},{"location":"T16_3/T16_3_upload_raw_data_files.html#task-3-add-files-to-your-upload","text":"Lets start adding files to your NOMAD upload. We will explore three different examples: Miscellaneous Files. Files of DFT calculation on Iron(III) Oxide. Files of x-ray photoelectron spectroscopy (XPS) measurement on polymers. Files can be added to an upload individually, or you can group them into a compressed file in .zip or .tar formats. Different ways and senarious to upload files to NOMAD In NOMAD, files can be uploaded in different ways, but whether they are processed into Entries or not depends on their format and NOMAD\u2019s built-in parsers. Here\u2019s how it works: Files that are processed by NOMAD These are files that are recognized by NOMAD, meaning that a built-in parser exists for the file you uploaded, the file will be processed according to a data schemas. It means that NOMAD reads the file, extracts data and organizes them based on the data schema which allows for generating visualizations, and analysis automations. Raw files that are processed in NOMAD become Entries This is common for simulation files since they follow standardized structures. Also a variety of experimental data organized in NeXus format .nxs are recognized by NOMAD. Files that are not processed by NOMAD These are files that do not have a built-in parser , meaning NOMAD cannot automatically extract and structure their data. They are still stored in NOMAD as part of your upload, and can be downloaded or shared, but they do not become entries in the database. NOMAD allows you to preview common file formats that are not automatically parsed. This means you can view the contents of the file directly within the platform without having to download it. Examples include: .txt , .csv , .pdf , .png , .jpg .","title":"Task 3: Add files to your upload"},{"location":"T16_3/T16_3_upload_raw_data_files.html#task-31-uploading-miscellaneous-files","text":"Download the example files for this excercise We have prepared a set of files for this task that can be downloaded from this link . Download the folder, then uncompress it on your local machine at you preferred directory. The folder contains files of the following formats: .zip , .pdf , .jpg , .txt , and .csv . file name format description FAIRmat_graphics .zip Compressed file that contains several FAIRmat logos in .png format JOSS_2023 .pdf A publication of NOMAD in the Journal of Open Source Software Nature_2022 .pdf A publication of FAIRmat in Nature journal P3HT_optical_absorption .csv Results of absorption measurement on P3HT from PerkinElmer spectrometer note_properties_of_good_dopants .txt Notes recorded during a conference talk experiment_polymer_doping .jpg A photograph of an experiment of preparing doped polymer solutions Note that these files will not create entires in NOMAD, because a built-in parser for them doesn't exist. They will be stored in your upload and can be accessed and shared with your colleagues, however, they will not be searchable within NOMAD. In this case, NOMAD acts as a typical storage cloud! You can add these files to your NOMAD upload. Do so by simply drag and drop the file or by opening the dialog to browse the files in your device. Uploading images, pdf files, text files, and tabular data Drag and drop Start with uploading the file FAIRmat_graphics.zip . Lets use the drag and drop method as shown in the animation below. When a compressed file is uploaded to NOMAD, it will be extracted automatically and the included files will be added to your upload. Open the file browser dialog Upload the remaining files using the file browser dialog as shown in the animation below.","title":"Task 3.1: Uploading miscellaneous files"},{"location":"T16_3/T16_3_upload_raw_data_files.html#task-32-uploading-computations-data-files","text":"Download the example files for this excercise We have prepared a set of files for this task that can be downloaded from this link . Download the folder to your local machine at you preferred directory. This folder contains the input and output files of a DFT calculation for Iron(III) Oxide using the FHI-aims code. FHI-aims* an all-electron density-functional-theory package that employs numeric atom-centered basis functions. It is designed for accurate and efficient simulations of molecules, clusters, surfaces, and bulk materials across the periodic table. Its advanced treatment of electronic structure allows for precise calculations of material properties, including band structures, total energies, and magnetic properties. More information in this link The calculations in this example were preformed using a code that is supported by NOMAD, i.e. the FHI-aims code. NOMAD has a parser for the FHI-aims code. This means it will create an Entry for these data. In other words, NOMAD will read the input and output files and provide all information in NOMAD's unified metainfo data schema. Uploading input and output files .zip of a DFT calculation Uploading the files Start with uploading the file FHI-aims.zip . Lets use the drag and drop method as shown in the animation below. After uploading files, processing is automatically triggered. This involves identifying supported file formats in NOMAD and extracting relevant (meta)data. The exact processing steps depend on the use case. For example, you can learn more about the processing of computational data on this link . Once processing is complete, NOMAD generates an Entry page that presents the data in a structured, hierarchical format based on the NOMAD metainfo schema. Opening and exploring your Entry To go to the entry page, click on the icon next to the entry. Here you can view the metadata and useful visulaization of your data, check the uploaded files, and explore your entry in details. OVERVIEW tab: 1- On the left, core metadata are displayed. 2- On the right, various cards present the available information. The cards you see depend on the properties or data available for that entry. For FHI-aims files, three main cards appear in the overview page: Materials card: shows key information and visulization of the composition and conventional cell. Electronic properties card: shows the calculated band structure, density of states, and Brillouin zone. Workflow Graph card: illustrates the various steps in the calculation, including their inputs and outputs. FILES tab: This tab shows the uploaded files. NOMAD lists all files in the same directory, as they usually belong together. DATA tab: Also known as the \"processed data\" tab, this shows the results of the parsing and normalization process done by NOMAD. NOMAD puts all the data in a unified, hierarchical, and machine-processable format, following the NOMAD metainfo.","title":"Task 3.2: Uploading computations data files"},{"location":"T16_3/T16_3_upload_raw_data_files.html#task-33-uploading-experiments-data-files","text":"Download the example files for this excercise We have prepared a set of files for this task that can be downloaded from this link . Download the folder, then uncompress it to your local machine at you preferred directory. This folder contains files related to an x-ray photoelectron spectroscopy (XPS) on the polymer PBTTT using SPECS spectrometer. It contains the data file in two different formats ( .nxs and .xml ), in addtion to an electronic lab notebook (ELN) file ( .yaml ) documenting additional details of the experiment. file name format description PBTTT_XPS_SPECS .nxs XPS data file in the standard NeXuS file format PBTTT_XPS_SPECS_raw .xml XPS data in a raw file format as produced by the spectrometer ELN_data_xml .yaml An ELN file used to record additional metadata of the experiment NOMAD supports experimental data files in the .nxs format. These files can be uploaded directly to NOMAD, where they are processed, and structured Entries are created. Uploading experimental data in the .nxs format Uploading the file Start with uploading the file PBTTT_XPS_SPECS.nxs . Lets use the drag and drop method as shown in the animation below. After uploading files, processing is automatically triggered. This involves identifying supported file formats in NOMAD and extracting relevant (meta)data. The exact processing steps depend on the use case. Once processing is complete, NOMAD generates an Entry page that presents the data in a structured, hierarchical format based on the NOMAD metainfo schema. Opening and exploring the Entry Click on the icon next to an entry navigates you to the respective entry page. Here you can view the metadata and useful visulaization of your data, check the uploaded files, and explore your entry in details. OVERVIEW Tab: 1- On the left, core metadata are displayed. 2- On the right, various cards present the available information. The cards you see depend on the properties or data available for that entry. For .nxs files, two main cards appear in the overview page: the data viewer and the materials card. FILES Tab: This tab shows the uploaded files. NOMAD lists all files in the same directory, as they usually belong together. DATA Tab: Also known as the \"processed data\" tab, this shows the results of the parsing and normalization process done by NOMAD. NOMAD puts all the data in a unified, hierarchical, and machine-processable format, following the NOMAD metainfo. Most scientific instruments generate experimental results in formats other than .nxs . NOMAD still supports these files by providing a conversion process using the NexusDataConverter built-in schema, which transforms raw data into the .nxs format. NexusDataConverter readers and the NeXuS application definitions A Reader is a program designed to interpret and extract data from a specific experimental technique or file format. The reader understands the structure and encoding of the particular data format and provides methods for accessing its contents in a programmatically friendly way. It acts as a bridge between raw experimental data and NOMAD by converting the data into the structured file format according to domain-specific application definitions. A list of available readers can be found here A NeXus application definition provides a structured specification of the terms and metadata required in an .nxs data file for a particular scientific application. These definitions outline the minimum set of terms that must be included in the data file for it to be considered valid according to the NeXus format. A list of NeXuS application definitions developed by FAIRmat can be found here NexusDataConverter uses readers to interpret the raw data files, and then structures them according to the outlines of the application definitions In the following examples, you will learn how to upload a raw file from a SPECS instrument in .xml format by using the NexusDataConverter . You will do this in two ways: Uploading only the raw file. Uploading both the raw file and an ELN file, enriching your data with metadata and ensuring compliance with community standards. Uploading experimental data in the .xml format Step 1: Click on the CREATE FROM SCHEMA button in your upload page. Step 2: In the create new entry from schema window, click on the drop-down menu of the built-in schema, and select NexusDataConverter Step 3: Give a descriptive name for the entry. Step 4: Click on CREATE. This will take you the NexusDataConverter Entry page. Step 5: From the reader drop-down menu, choose the approperiate reader for your files. For this exercise select xps . Step 6: From the nxdl drop-down menu, choose the approperiate application definition for your experiment. For this exercise select NXxps Step 7: Upload the raw data file PBTTT_XPS_SPECS_raw.xml . Step 8: Give a descriptive name for the generated .nxs file. Step 9: Click on the save icon to start the conversion process. Check the overview page of your upload. There you will fine two newly created entries; one for the NexusDataConverter and one for the generated .nxs file from you your raw file. NOMAD still stores your .xml raw file in the upload directory. Uploading experimental data in the .xml format with additional ELN data Often, raw files generated by instruments from various vendors lack complete metadata and essential details about the experiment. To address this, scientists document all experimental details in an Electronic Lab Notebook (ELN). Combining data from raw files with information from ELNs ensures that experiments are comprehensively described with rich metadata and conform to community standards. NOMAD\u2019s NexusDataConverter allows you to merge experimental raw data files with ELN entries in .yaml format, producing .nxs files that meet community standards and ensure your data are richly-described. The ELN .yaml file can be generated by various ELN software tools or created manually using a text editor. For each supported experimental raw file format, FAIRmat provides a template ELN .yaml file containing all necessary attributes and parameters to complement the raw file\u2019s data. These templates can be found here While these files can be edited with any text editor, we recommend using VS Code for an optimized editing experience. Open the eln_data_xml.yaml file and edit its contents Modify the start_time and end_time of your experiment. Write your information in the users section. Explore the other fields available in the ELN file. Save the file. Upload your data file .xml and your ELN data .yaml using NexusDataConverter Step 1: Click on the CREATE FROM SCHEMA button in your upload page. Step 2: In the create new entry from schema window, click on the drop-down menu of the built-in schema, and select NexusDataConverter Step 3: Give a descriptive name for the entry. Step 4: Click on CREATE. This will take you the NexusDataConverter Entry page. Step 5: From the reader drop-down menu, choose the approperiate reader for your files. For this exercise select xps . Step 6: From the nxdl drop-down menu, choose the approperiate application definition for your experiment. For this exercise select NXxps Step 7: Upload the raw data file PBTTT_XPS_SPECS_raw.xml as well as the ELN data file eln_data_xml.yaml . Step 8: Give a descriptive name for the generated .nxs file. Step 9: Click on the save icon to start the conversion process.","title":"Task 3.3: Uploading experiments data files"},{"location":"T16_4/T16_4_visualize_your_data.html","text":"placeholder for Visualize your data","title":"T16 4 visualize your data"},{"location":"T16_5/T16_5_create_a_dataset.html","text":"You can organize several entries by grouping them into common datasets, making it easier to manage related data. Datasets have no influence on the processing of data and are used to reference a collection of curated data. Users can get a DOI for their datasets. Task 1: Group your entires into a Dataset \u00b6 Step 1: In the uploads page, click on EDIT AUTHOR METADATA OF ALL ENTRIES button. This will add all the Entries in the upload to the dataset. Alternatively, if you would like to add selected entries from your Upload, click on the check box next to the entries you would like to add, then click on to open the EDIT AUTHOR METADATA window for the selected entries only. Step 2: In the Datasets section, you have two options: Create a new dataset: If the dataset you want to group your entries under doesn't exist yet, you can create one here. Search for an existing dataset: If the dataset already exists, you can search for it by name or other attributes. Step 3: Once you've selected or created the appropriate dataset, click ADD ENTRY TO NEW DATASET Step 4: Click on SUBMIT to to group your entries under that dataset. Task 2: Manage your Dataset and assigne it a DOI \u00b6 User created datasets exist in the \u201cYour datasets page\u201d page. You can reach there by clicking on Datasets in the PUBLISH menu. Here you can view a list of all your created datasets with their relevant information and assign them a DOI. Assigning a DOI makes the dataset permanent\u2014it cannot be modified or deleted. If you want to test the process without actually publishing the data, you can do so in the NOMAD test installation . Click on the icon next to the dataset to view entries that are part of the dataset. This will take you to the dataset page, with a list of all entries included. You can assign a DOI for your dataset by clicking on the icon next to the dataset.","title":"Create a Dataset"},{"location":"T16_5/T16_5_create_a_dataset.html#task-1-group-your-entires-into-a-dataset","text":"Step 1: In the uploads page, click on EDIT AUTHOR METADATA OF ALL ENTRIES button. This will add all the Entries in the upload to the dataset. Alternatively, if you would like to add selected entries from your Upload, click on the check box next to the entries you would like to add, then click on to open the EDIT AUTHOR METADATA window for the selected entries only. Step 2: In the Datasets section, you have two options: Create a new dataset: If the dataset you want to group your entries under doesn't exist yet, you can create one here. Search for an existing dataset: If the dataset already exists, you can search for it by name or other attributes. Step 3: Once you've selected or created the appropriate dataset, click ADD ENTRY TO NEW DATASET Step 4: Click on SUBMIT to to group your entries under that dataset.","title":"Task 1: Group your entires into a Dataset"},{"location":"T16_5/T16_5_create_a_dataset.html#task-2-manage-your-dataset-and-assigne-it-a-doi","text":"User created datasets exist in the \u201cYour datasets page\u201d page. You can reach there by clicking on Datasets in the PUBLISH menu. Here you can view a list of all your created datasets with their relevant information and assign them a DOI. Assigning a DOI makes the dataset permanent\u2014it cannot be modified or deleted. If you want to test the process without actually publishing the data, you can do so in the NOMAD test installation . Click on the icon next to the dataset to view entries that are part of the dataset. This will take you to the dataset page, with a list of all entries included. You can assign a DOI for your dataset by clicking on the icon next to the dataset.","title":"Task 2: Manage your Dataset and assigne it a DOI"},{"location":"T16_6/T16_6_document_your_research.html","text":"Create a New Upload \u00b6 On any page in NOMAD, click PUBLISH -> click Uploads -> click CREATE A NEW UPLOAD -> edit/give name -> click SAVE . Create an Entry Using NOMAD's Built-in Schema: \u00b6 Open the upload you just created or create a new upload. -> click CREATE FROM SCHEMA -> give a descriptive name, select your desired built-in schema from dropdown or type to see suggestions -> click CREATE . Create a substance entry \u00b6 Now, let's create an entry using the built-in Substance ELN schema for P3HT powder . Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Substance ELN in step 3. Example: Creating an entry for P3HT powder (screenshots) The input data fields that the built-in schema Substance ELN offer: The built-in schema Substance ELN provides the following fields for input: substance name: Automatically used as the entry file name. datetime: Allows entry of a date/time stamp. substance ID: A unique, human-readable ID for the substance. detailed substance description: A free text field for additional information. Additional subsections available in the data subsection include: elemental composition: Define the chemical composition with atomic and mass fractions. pure substance: Specify if the material is a pure substance purchased from an external vendor, with fields like: Substance name IUPAC name Molecular formula CAS number Inchi Key, SMILES, and more. substance identifier: Add identifiers for specific substances. Task: Create an ELN entry for a substance (ca. 3 minutes) Create an ELN entry in NOMAD for one of the following substances: Chloroform Glass substrate Pre-patterned ITO substrates Use the Substance ELN schema and include as many details as you like (e.g., Substance Name, Datetime, Substance ID, Description). Tip: Follow the steps for creating an entry . Create a sample entry \u00b6 Now, let's create an entry using the built-in Generic Sample ELN schema for P3HT Thin Film . Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Generic Sample ELN in step 3. Example: Creating an entry for P3HT thin film on glass (screenshots) The input data fields that the built-in schema Generic Sample ELN offers: The built-in schema Generic Sample ELN provides the following fields for input: name: Automatically used as the entry file name. datetime: Allows entry of a date/time stamp. ID: A unique, human-readable ID for the sample. description: A free text field for additional information. Additional subsections available in the data subsection include: elemental composition: Define the chemical composition with atomic and mass fractions. components: Specify the components used to create the sample, including raw materials or system components. sample identifier: Add unique identifiers for the sample. Task: Create an ELN entry for a sample (ca. 1 minute) Create an ELN entry in NOMAD for one of the following samples: P3HT Thin Film P3HT Solution Use the Generic Sample ELN schema and include as many details as you like (e.g., Short Name, Datetime, ID, Description). Tip: Follow the steps for creating an entry . Create an instrument entry \u00b6 Now, let's create an entry using the built-in Instrument ELN schema for UV Ozone Cleaner . Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Instrument ELN in step 3. Example: Creating an entry for UV Ozone Cleaner (screenshots) The input data fields that the built-in schema Instrument ELN offers: The built-in schema Instrument ELN provides the following fields for input: name: Automatically used as the entry file name. datetime: Allows entry of a date/time stamp. ID: A unique, human-readable ID for the instrument. description: A free text field for additional information. Additional subsections available in the data subsection include: instrument identifiers: Specify the type of instrument and additional metadata, if applicable. Task: Create an ELN entry for an instrument (ca. 1 minute) Create an ELN entry in NOMAD for one of the following instruments: Ultrasonic Bath Scale Optical Spectrometer Conductivity Board Spin Coater Use the Instrument ELN schema and include as many details as you like (e.g., name, datetime, ID, description). Tip: Follow the steps for creating an entry . ```md Create a process entry \u00b6 Now, let's create an entry using the built-in Material Processing ELN schema for Preparation of P3HT solution in chloroform . Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Material Processing ELN in step 3. Example: Creating an entry for P3HT solution preparation (screenshots) The input data fields that the built-in schema Material Processing ELN offers: The Material Processing ELN schema provides the following fields for input: name: Automatically used as the entry file name. starting time and ending time: Allows entry of a date/time stamp for the process duration. ID: A unique, human-readable ID for the process. location: A text field specifying the location where the process took place. description: A free text field for additional information about the process. Continue the above example: Fill sdditional subsections available in the data subsection (screenshots): Additional subsections available in the data subsection include (screenshots): steps: Define the step-by-step procedure for the material processing. Here we add 3 steps for our process: polymer weighing, solvent filling, and mixing. to do this use the + in front of the steps subsection and add process step name and description. Don't forget to save after each step, and make sure you make the steps in order, because you cannot reorder them later. (see screenshots) instruments: List the instruments used in the process. (screenshots) samples: Specify the samples that are created or used in the process. Continue by adding the connection of your process to the resulting sample entities. (screenshot) Note that the added information in the subsections will be used to automatically fill in the Workflow Graph as tasks , as well as the References section . You can find the Workflow Graph , in OVERVIEW tab of the entry. (screenshot) You can modify the workflow section by adding additional information such as inputs , additional tasks , and outputs . You can do this in the workflow2 section. The workflow2 section of the solution preparation example (ELNProcess) can be reached within the solution preparation entry -> DATA tab -> in the left side pane location workflow2 section. We can now add inputs, either by referencing to an existing entry (e.g., the ELNSubstance we made for P3HT powder),: or by directly creating a new entry directly in the current ELNprocess (e.g., chloroform based on ELNSubstance in the following screenshots): once the inputs P3HT and chloroform were added as inputs, you can check the updated Wrokflow Graph in the OVERVIEW tab: I suggest to put a checkpoint here, for those who did not follow something like: please download these files from here and drag and drop them to your upload. Create a measurement entry \u00b6 Similar to the examples given above, you can also create an entry using the built-in Measurement ELN schema for your measurements. Example: Creating an entry for Optical Absorption Measurement (steps) Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Measurement ELN in step 3. Use the referencing option to the existing entries, or create new entries to connect to your Measurement ELN , similar to the steps 13-17 and 31-36 in the Built-in Schema for Material Processing . Key input fields in Measurement ELN : Similar to other entries, we have name , starting Time , ID , location , description . Subsections such as steps , samples , instruments used in measurement. Integrate your experiment \u00b6 Once all substances, samples, processes, and measurements are defined, you can integrate them into a structured workflow using the Experiment ELN schema. The Experiment ELN schema allows linking processes and measurements into a single entry for a comprehensive overview of your experiment. Example: Creating an Experiment ELN Entry (steps) Create an entry using the built-in Experiment ELN schema. Provide a name , description , and link relevant processes and measurements . Save the entry to establish a structured record of your experiment. Following, you see screensots of how your experiment entry and workflow graph will look like after you integrated your processes and measurements to your experiment . the data section looks like the following: The Workflow Graph automatically updates and will look similar to the following Exploring and Searching Entries in NOMAD\u2019s ELN \u00b6 Download the example file for this excercise We have prepared a compressed file for this task, which can be downloaded from this link . The file contains multiple NOMAD ELN entries in .json format. These entries have been created using the NOMAD ELN built-in schema, organized into folders, and categorized with custom tags. You can drag and drop this file into a new upload in NOMAD to view its contents. Imagine you have created multiple entries of substances, samples, instruments, processes, and measurements, and you need to quickly find a specific experiment or material. Instead of manually searching through files, NOMAD\u2019s ELN allows you to search, filter, and organize your entries\u2014saving you time and effort. Organizing your ELN upload NOMAD is a file-based system. You can access, organize, and download your files within each upload. You can also create folders to categorize entries into materials, samples, instruments, processes, and results, as well as upload additional documents, such as relevant PDFs. If you plan to organize your entries into separate folders, do so before you reference them to each other. Moving them afterward may break the reference links. You can follow these steps to organize your ELN entries: Navigate to the FILES tab in your upload. This view functions like a file explorer, allowing you to view and manage files. Add new folders and organize them according to your needs. Drag and drop files into the desired folder. A prompt will appear, asking if you want to copy or move the files\u2014choose according to your needs. Once all files are sorted, take a moment to review the structure. Here\u2019s an example of an organized ELN Searching your ELN entries To search for entries in your ELN, follow these steps: on the top of the ELN upload page, click on the icon. From the drop-down menu, select Entries . This will open NOMAD's EXPLORE page with a filter applied to display only the entries from your upload. On the EXPLORE page, you can use the filter options in the sidebar to refine your search, enter specific keywords in the search bar to find relevant entries, or create custom widgets to visualise your ELN data. Filtering entries in NOMAD NOMAD provides various filters that can be used to efficiently find your ELN entries, but the following two filters are particularlly effective: Filter by built-in schema used to create the entry. For example, ELNInstrument, ELNSubstances, ELNSample, etc. Filter by custom tags, where you assign common tags to related entries for easy grouping. For example, tag all solvents as \"my_solvent\" or all samples as \"my_samples\". Using these filters helps you quickly locate specific entries in your ELN. Customize your search interface with widgets Widgets allow you to customize your search interface to better suit your data exploration needs. By adding and rearranging widgets, you can create a personalized view that highlights the most relevant filters, metadata, or visualizations most relevant to your research. Create a custom widget for ELN sections and custom tags To create a custom widget for filtering your ELN, follow these steps: Click on the + TERMS button to open the Edit terms widget menu. In the Search quantity field, type eln . A list of available filters will appear. Select results.eln.sections from the list. This will enable filtering based on the built-in ELN sections available in your ELN upload. Write a descriptive title for the custom widget in Title field . Click DONE! The new ELN sections widget now appears at the top of your EXPLORE page and displays ELN entry types along with their corresponding counts. You can now follow the same steps to create a custom widget for filtering by custom tags. In Step 3, instead of selecting results.eln.sections , choose results.eln.tags . This will create a widget that filters your ELN entries based on the custom tags you have assigned. This widget will then appear on your EXPLORE page, allowing you to quickly view and filter entries by their associated tags.","title":"Document Your Research"},{"location":"T16_6/T16_6_document_your_research.html#create-a-new-upload","text":"On any page in NOMAD, click PUBLISH -> click Uploads -> click CREATE A NEW UPLOAD -> edit/give name -> click SAVE .","title":"Create a New Upload"},{"location":"T16_6/T16_6_document_your_research.html#create-an-entry-using-nomads-built-in-schema","text":"Open the upload you just created or create a new upload. -> click CREATE FROM SCHEMA -> give a descriptive name, select your desired built-in schema from dropdown or type to see suggestions -> click CREATE .","title":"Create an Entry Using NOMAD's Built-in Schema:"},{"location":"T16_6/T16_6_document_your_research.html#create-a-substance-entry","text":"Now, let's create an entry using the built-in Substance ELN schema for P3HT powder . Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Substance ELN in step 3. Example: Creating an entry for P3HT powder (screenshots) The input data fields that the built-in schema Substance ELN offer: The built-in schema Substance ELN provides the following fields for input: substance name: Automatically used as the entry file name. datetime: Allows entry of a date/time stamp. substance ID: A unique, human-readable ID for the substance. detailed substance description: A free text field for additional information. Additional subsections available in the data subsection include: elemental composition: Define the chemical composition with atomic and mass fractions. pure substance: Specify if the material is a pure substance purchased from an external vendor, with fields like: Substance name IUPAC name Molecular formula CAS number Inchi Key, SMILES, and more. substance identifier: Add identifiers for specific substances. Task: Create an ELN entry for a substance (ca. 3 minutes) Create an ELN entry in NOMAD for one of the following substances: Chloroform Glass substrate Pre-patterned ITO substrates Use the Substance ELN schema and include as many details as you like (e.g., Substance Name, Datetime, Substance ID, Description). Tip: Follow the steps for creating an entry .","title":"Create a substance entry"},{"location":"T16_6/T16_6_document_your_research.html#create-a-sample-entry","text":"Now, let's create an entry using the built-in Generic Sample ELN schema for P3HT Thin Film . Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Generic Sample ELN in step 3. Example: Creating an entry for P3HT thin film on glass (screenshots) The input data fields that the built-in schema Generic Sample ELN offers: The built-in schema Generic Sample ELN provides the following fields for input: name: Automatically used as the entry file name. datetime: Allows entry of a date/time stamp. ID: A unique, human-readable ID for the sample. description: A free text field for additional information. Additional subsections available in the data subsection include: elemental composition: Define the chemical composition with atomic and mass fractions. components: Specify the components used to create the sample, including raw materials or system components. sample identifier: Add unique identifiers for the sample. Task: Create an ELN entry for a sample (ca. 1 minute) Create an ELN entry in NOMAD for one of the following samples: P3HT Thin Film P3HT Solution Use the Generic Sample ELN schema and include as many details as you like (e.g., Short Name, Datetime, ID, Description). Tip: Follow the steps for creating an entry .","title":"Create a sample entry"},{"location":"T16_6/T16_6_document_your_research.html#create-an-instrument-entry","text":"Now, let's create an entry using the built-in Instrument ELN schema for UV Ozone Cleaner . Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Instrument ELN in step 3. Example: Creating an entry for UV Ozone Cleaner (screenshots) The input data fields that the built-in schema Instrument ELN offers: The built-in schema Instrument ELN provides the following fields for input: name: Automatically used as the entry file name. datetime: Allows entry of a date/time stamp. ID: A unique, human-readable ID for the instrument. description: A free text field for additional information. Additional subsections available in the data subsection include: instrument identifiers: Specify the type of instrument and additional metadata, if applicable. Task: Create an ELN entry for an instrument (ca. 1 minute) Create an ELN entry in NOMAD for one of the following instruments: Ultrasonic Bath Scale Optical Spectrometer Conductivity Board Spin Coater Use the Instrument ELN schema and include as many details as you like (e.g., name, datetime, ID, description). Tip: Follow the steps for creating an entry . ```md","title":"Create an instrument entry"},{"location":"T16_6/T16_6_document_your_research.html#create-a-process-entry","text":"Now, let's create an entry using the built-in Material Processing ELN schema for Preparation of P3HT solution in chloroform . Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Material Processing ELN in step 3. Example: Creating an entry for P3HT solution preparation (screenshots) The input data fields that the built-in schema Material Processing ELN offers: The Material Processing ELN schema provides the following fields for input: name: Automatically used as the entry file name. starting time and ending time: Allows entry of a date/time stamp for the process duration. ID: A unique, human-readable ID for the process. location: A text field specifying the location where the process took place. description: A free text field for additional information about the process. Continue the above example: Fill sdditional subsections available in the data subsection (screenshots): Additional subsections available in the data subsection include (screenshots): steps: Define the step-by-step procedure for the material processing. Here we add 3 steps for our process: polymer weighing, solvent filling, and mixing. to do this use the + in front of the steps subsection and add process step name and description. Don't forget to save after each step, and make sure you make the steps in order, because you cannot reorder them later. (see screenshots) instruments: List the instruments used in the process. (screenshots) samples: Specify the samples that are created or used in the process. Continue by adding the connection of your process to the resulting sample entities. (screenshot) Note that the added information in the subsections will be used to automatically fill in the Workflow Graph as tasks , as well as the References section . You can find the Workflow Graph , in OVERVIEW tab of the entry. (screenshot) You can modify the workflow section by adding additional information such as inputs , additional tasks , and outputs . You can do this in the workflow2 section. The workflow2 section of the solution preparation example (ELNProcess) can be reached within the solution preparation entry -> DATA tab -> in the left side pane location workflow2 section. We can now add inputs, either by referencing to an existing entry (e.g., the ELNSubstance we made for P3HT powder),: or by directly creating a new entry directly in the current ELNprocess (e.g., chloroform based on ELNSubstance in the following screenshots): once the inputs P3HT and chloroform were added as inputs, you can check the updated Wrokflow Graph in the OVERVIEW tab: I suggest to put a checkpoint here, for those who did not follow something like: please download these files from here and drag and drop them to your upload.","title":"Create a process entry"},{"location":"T16_6/T16_6_document_your_research.html#create-a-measurement-entry","text":"Similar to the examples given above, you can also create an entry using the built-in Measurement ELN schema for your measurements. Example: Creating an entry for Optical Absorption Measurement (steps) Follow the steps for creating an entry using NOMAD's Built-in Schema. and select Measurement ELN in step 3. Use the referencing option to the existing entries, or create new entries to connect to your Measurement ELN , similar to the steps 13-17 and 31-36 in the Built-in Schema for Material Processing . Key input fields in Measurement ELN : Similar to other entries, we have name , starting Time , ID , location , description . Subsections such as steps , samples , instruments used in measurement.","title":"Create a measurement entry"},{"location":"T16_6/T16_6_document_your_research.html#integrate-your-experiment","text":"Once all substances, samples, processes, and measurements are defined, you can integrate them into a structured workflow using the Experiment ELN schema. The Experiment ELN schema allows linking processes and measurements into a single entry for a comprehensive overview of your experiment. Example: Creating an Experiment ELN Entry (steps) Create an entry using the built-in Experiment ELN schema. Provide a name , description , and link relevant processes and measurements . Save the entry to establish a structured record of your experiment. Following, you see screensots of how your experiment entry and workflow graph will look like after you integrated your processes and measurements to your experiment . the data section looks like the following: The Workflow Graph automatically updates and will look similar to the following","title":"Integrate your experiment"},{"location":"T16_6/T16_6_document_your_research.html#exploring-and-searching-entries-in-nomads-eln","text":"Download the example file for this excercise We have prepared a compressed file for this task, which can be downloaded from this link . The file contains multiple NOMAD ELN entries in .json format. These entries have been created using the NOMAD ELN built-in schema, organized into folders, and categorized with custom tags. You can drag and drop this file into a new upload in NOMAD to view its contents. Imagine you have created multiple entries of substances, samples, instruments, processes, and measurements, and you need to quickly find a specific experiment or material. Instead of manually searching through files, NOMAD\u2019s ELN allows you to search, filter, and organize your entries\u2014saving you time and effort. Organizing your ELN upload NOMAD is a file-based system. You can access, organize, and download your files within each upload. You can also create folders to categorize entries into materials, samples, instruments, processes, and results, as well as upload additional documents, such as relevant PDFs. If you plan to organize your entries into separate folders, do so before you reference them to each other. Moving them afterward may break the reference links. You can follow these steps to organize your ELN entries: Navigate to the FILES tab in your upload. This view functions like a file explorer, allowing you to view and manage files. Add new folders and organize them according to your needs. Drag and drop files into the desired folder. A prompt will appear, asking if you want to copy or move the files\u2014choose according to your needs. Once all files are sorted, take a moment to review the structure. Here\u2019s an example of an organized ELN Searching your ELN entries To search for entries in your ELN, follow these steps: on the top of the ELN upload page, click on the icon. From the drop-down menu, select Entries . This will open NOMAD's EXPLORE page with a filter applied to display only the entries from your upload. On the EXPLORE page, you can use the filter options in the sidebar to refine your search, enter specific keywords in the search bar to find relevant entries, or create custom widgets to visualise your ELN data. Filtering entries in NOMAD NOMAD provides various filters that can be used to efficiently find your ELN entries, but the following two filters are particularlly effective: Filter by built-in schema used to create the entry. For example, ELNInstrument, ELNSubstances, ELNSample, etc. Filter by custom tags, where you assign common tags to related entries for easy grouping. For example, tag all solvents as \"my_solvent\" or all samples as \"my_samples\". Using these filters helps you quickly locate specific entries in your ELN. Customize your search interface with widgets Widgets allow you to customize your search interface to better suit your data exploration needs. By adding and rearranging widgets, you can create a personalized view that highlights the most relevant filters, metadata, or visualizations most relevant to your research. Create a custom widget for ELN sections and custom tags To create a custom widget for filtering your ELN, follow these steps: Click on the + TERMS button to open the Edit terms widget menu. In the Search quantity field, type eln . A list of available filters will appear. Select results.eln.sections from the list. This will enable filtering based on the built-in ELN sections available in your ELN upload. Write a descriptive title for the custom widget in Title field . Click DONE! The new ELN sections widget now appears at the top of your EXPLORE page and displays ELN entry types along with their corresponding counts. You can now follow the same steps to create a custom widget for filtering by custom tags. In Step 3, instead of selecting results.eln.sections , choose results.eln.tags . This will create a widget that filters your ELN entries based on the custom tags you have assigned. This widget will then appear on your EXPLORE page, allowing you to quickly view and filter entries by their associated tags.","title":"Exploring and Searching Entries in NOMAD\u2019s ELN"},{"location":"T16_7/T16_7_create_custom_eln_templates.html","text":"Inspecting a Custom ELN in NOMAD GUI \u00b6 In this part, we - Initially inspect an example custom ELN for polymer processing experiment in the NOMAD GUI together. - Then, review the main six guidlines needed to write custom ELN schemas together. - Finally, inspect the YAML file of the polymer processing example, and Example: Inspecting a custom ELN for polymer processing in NOMAD GUI Now let's inspect a simple custom ELN for Polymer Processing together. You can find the polymer_processing_schema.archive.yaml file in tutorial_16_materials/part_4_files or download it here . In order to see how it looks like in the NOMAD GUI, make a new upload, and drag and drop the polymer_processing_schema.archive.yaml * file, so that NOMAD can process it. Then create a new entry, based on this schema (scrreenshots). After this, you will be able to see the custom ELN, opened in the DATA tab. You can take some moment and inspect different tabs, e.g., OVERVIEW tab and DATA tab, the quantities and the subsections we have here. Guidelines for Building a Custom ELN Schema \u00b6 To build a custom NOMAD ELN, you need to use the NOMAD metainfo schema language, primarily written in YAML. Your custom schema file must have the ending extension .archive.yaml 1. NOMAD's archive.yaml files start with the definitions keyword, and must have a name , and can have a description . NOMAD syntax is: definitions : name : description : Example: definitions : name : My NOMAD ELN description : This is an electronic lab notebook schema that includes several sections. 2. A schema can have several sections. NOMAD syntax is: definitions : name : description : sections : My_first_section : My_second_section : My_third_section : 3. Sections can inherit structure and definition from NOMAD's base_sections or other sections. When inheriting from a NOMAD base section, use the base_sections keyword and list the desired base sections you would like to inherit from. The keyword base_sections additionally allows you to also inherit from other sections (e.g., within the same schema or even a section that have been published in NOMAD, see schema package references in NOMAD Documentation ). Inherited sections can be given in a python list, or subsequent indented lines starting with a dash, - . Example: definitions : name : My NOMAD ELN description : Custom ELN schema. sections : My_first_section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample My_second_section : My_third_section : or alternatively in the form of a Python list: definitions : name : My NOMAD ELN description : Custom ELN schema. sections : My_first_section : base_sections : [ 'nomad.datamodel.data.EntryData' , 'nomad.datamodel.metainfo.eln.Sample' ] My_second_section : My_third_section : 4. Each section can contain quantities, other sections, and subsections. Each section can contain a set of quantites that need to be captured by the ELN. The quantities represent the parameters of your measurement or processing conditions. In addition, sections can also contain subsections. When including subsections, you need to tell NOMAD the subsections you included are themselves a section. How? By including the keyword sections: in the next indented line (see bottom example). A list of editable quantities can be found here . NOMAD syntax is: definitions : name : My NOMAD ELN description : This is an electronic lab notebook schema that includes several sections. sections : My_first_section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample quantities : sub_sections : My_first_subsection : section : My_second_subsection : section : My_second_section : My_third_section : 5. Quantities can be defined with type, shape, unit and other properties Quantities define possible primitive values. The basic properties that can go into a quantity definition are type , shape , and unit . definitions : name : My NOMAD ELN description : This is an electronic lab notebook schema that includes several sections. sections : My_first_section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample quantities : first_quantity : - type : #For example, str or np.float64 - shape : #For example scalar or list (['*']) - unit : #For example, meters, amperes, or seconds sub_sections : My_first_subsection : section : My_second_subsection : section : My_third_subsection : section : My_second_section : My_third_section : 6. Section and quantities can have annotations Annotations provide additional information that NOMAD can use to alter its behavior around these definitions and how users can interact with them. The keyword for annotations is m_annotations . definitions : name : My NOMAD ELN description : This is an electronic lab notebook schema that includes several sections. sections : My_first_section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample quantities : first_quantity : - type : #For example, str or np.float64 - shape : #For example scalar or list (['*']) - unit : #For example, meters, amperes, or seconds m_annotations : annotation_name : key1 : value1 sub_section : My_first_subsection : section : My_second_subsection : section : My_third_subsection : section : My_second_section : My_third_section : Example: Inspecting the YAML schema of the polymer processing ELN Now let's inspect the YAML schema file of the above custom Polymer Processing ELN together. We use vscode to show and edit this file. Here we started with definitions: , we have a name: , and don't have a description (guideline 1). A schema is a section itself, therefore having the keyword sections: (guideline 4). This schema has only one section: Experiment_Information_gbu (guideline 2). The Experiment_Information_gbu section inherits properties from some other sections that should be listed in base_sections (guideline 3), and contains quantities (keyword quantities: ) and subsections (keyword subsections: ) (guideline 4). The 'Experiment_Information_gbu' inherits from the NOMAD base section nomad.datamodel.data.EntryData (guideline 3). In order to have data becomming an entry in NOMAD, at least the nomad.datamodel.data.EntryData or other base sections that inherit from this base section should be given here. We defined four quantities for the Experiment_Information_gbu section: Name_gbu , Researcher_gbu , Date_gbu , and 'Additional_Notes_gbu' (guideline 4). We chose these names (given by the user or gbu); They are not NOMAD syntax. each of these quantities are defined with type (guideline 5), and have annotations (keyword: m_annotations , guideline 6). Let's inspect one of these quantities together, e.g., Name_gbu: . Look at the NOMAD syntax and try too read it like this: \"I want a field to add a name for my experiment, it should be a piece of small text. I name this quantity something descriptive, e.g., Name_gbu , it should a text, so it will be of type str . Although optional, I want it to have some default value, e.g., to guide the user what it, or what it should be filled most often, so I define its default value in the next line default: Experiment title . I want it to be editable in the GUI. Therefore, I should define it further by annotations. Which annotation? I now now it is related to ELNs, and it is going to be an editable string quantity, so with some intuition and refering to NOMAD documentation and checking other schemas, I write, and care for the indentations. Name_gbu : type : str default : Experiment title m_annotations : eln : component : StringEditQuantity Now let's inspect what subsections does my Experiment_Information_gbu have. The Experiment_Information_gbu has 3 subsections, each of the 3 being a section itself (guideline 4), and therefore all the guidelines 2-6 apply to each of the 3 subsections, individually.","title":"Create Custom ELN Templates"},{"location":"T16_7/T16_7_create_custom_eln_templates.html#inspecting-a-custom-eln-in-nomad-gui","text":"In this part, we - Initially inspect an example custom ELN for polymer processing experiment in the NOMAD GUI together. - Then, review the main six guidlines needed to write custom ELN schemas together. - Finally, inspect the YAML file of the polymer processing example, and Example: Inspecting a custom ELN for polymer processing in NOMAD GUI Now let's inspect a simple custom ELN for Polymer Processing together. You can find the polymer_processing_schema.archive.yaml file in tutorial_16_materials/part_4_files or download it here . In order to see how it looks like in the NOMAD GUI, make a new upload, and drag and drop the polymer_processing_schema.archive.yaml * file, so that NOMAD can process it. Then create a new entry, based on this schema (scrreenshots). After this, you will be able to see the custom ELN, opened in the DATA tab. You can take some moment and inspect different tabs, e.g., OVERVIEW tab and DATA tab, the quantities and the subsections we have here.","title":"Inspecting a Custom ELN in NOMAD GUI"},{"location":"T16_7/T16_7_create_custom_eln_templates.html#guidelines-for-building-a-custom-eln-schema","text":"To build a custom NOMAD ELN, you need to use the NOMAD metainfo schema language, primarily written in YAML. Your custom schema file must have the ending extension .archive.yaml 1. NOMAD's archive.yaml files start with the definitions keyword, and must have a name , and can have a description . NOMAD syntax is: definitions : name : description : Example: definitions : name : My NOMAD ELN description : This is an electronic lab notebook schema that includes several sections. 2. A schema can have several sections. NOMAD syntax is: definitions : name : description : sections : My_first_section : My_second_section : My_third_section : 3. Sections can inherit structure and definition from NOMAD's base_sections or other sections. When inheriting from a NOMAD base section, use the base_sections keyword and list the desired base sections you would like to inherit from. The keyword base_sections additionally allows you to also inherit from other sections (e.g., within the same schema or even a section that have been published in NOMAD, see schema package references in NOMAD Documentation ). Inherited sections can be given in a python list, or subsequent indented lines starting with a dash, - . Example: definitions : name : My NOMAD ELN description : Custom ELN schema. sections : My_first_section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample My_second_section : My_third_section : or alternatively in the form of a Python list: definitions : name : My NOMAD ELN description : Custom ELN schema. sections : My_first_section : base_sections : [ 'nomad.datamodel.data.EntryData' , 'nomad.datamodel.metainfo.eln.Sample' ] My_second_section : My_third_section : 4. Each section can contain quantities, other sections, and subsections. Each section can contain a set of quantites that need to be captured by the ELN. The quantities represent the parameters of your measurement or processing conditions. In addition, sections can also contain subsections. When including subsections, you need to tell NOMAD the subsections you included are themselves a section. How? By including the keyword sections: in the next indented line (see bottom example). A list of editable quantities can be found here . NOMAD syntax is: definitions : name : My NOMAD ELN description : This is an electronic lab notebook schema that includes several sections. sections : My_first_section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample quantities : sub_sections : My_first_subsection : section : My_second_subsection : section : My_second_section : My_third_section : 5. Quantities can be defined with type, shape, unit and other properties Quantities define possible primitive values. The basic properties that can go into a quantity definition are type , shape , and unit . definitions : name : My NOMAD ELN description : This is an electronic lab notebook schema that includes several sections. sections : My_first_section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample quantities : first_quantity : - type : #For example, str or np.float64 - shape : #For example scalar or list (['*']) - unit : #For example, meters, amperes, or seconds sub_sections : My_first_subsection : section : My_second_subsection : section : My_third_subsection : section : My_second_section : My_third_section : 6. Section and quantities can have annotations Annotations provide additional information that NOMAD can use to alter its behavior around these definitions and how users can interact with them. The keyword for annotations is m_annotations . definitions : name : My NOMAD ELN description : This is an electronic lab notebook schema that includes several sections. sections : My_first_section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample quantities : first_quantity : - type : #For example, str or np.float64 - shape : #For example scalar or list (['*']) - unit : #For example, meters, amperes, or seconds m_annotations : annotation_name : key1 : value1 sub_section : My_first_subsection : section : My_second_subsection : section : My_third_subsection : section : My_second_section : My_third_section : Example: Inspecting the YAML schema of the polymer processing ELN Now let's inspect the YAML schema file of the above custom Polymer Processing ELN together. We use vscode to show and edit this file. Here we started with definitions: , we have a name: , and don't have a description (guideline 1). A schema is a section itself, therefore having the keyword sections: (guideline 4). This schema has only one section: Experiment_Information_gbu (guideline 2). The Experiment_Information_gbu section inherits properties from some other sections that should be listed in base_sections (guideline 3), and contains quantities (keyword quantities: ) and subsections (keyword subsections: ) (guideline 4). The 'Experiment_Information_gbu' inherits from the NOMAD base section nomad.datamodel.data.EntryData (guideline 3). In order to have data becomming an entry in NOMAD, at least the nomad.datamodel.data.EntryData or other base sections that inherit from this base section should be given here. We defined four quantities for the Experiment_Information_gbu section: Name_gbu , Researcher_gbu , Date_gbu , and 'Additional_Notes_gbu' (guideline 4). We chose these names (given by the user or gbu); They are not NOMAD syntax. each of these quantities are defined with type (guideline 5), and have annotations (keyword: m_annotations , guideline 6). Let's inspect one of these quantities together, e.g., Name_gbu: . Look at the NOMAD syntax and try too read it like this: \"I want a field to add a name for my experiment, it should be a piece of small text. I name this quantity something descriptive, e.g., Name_gbu , it should a text, so it will be of type str . Although optional, I want it to have some default value, e.g., to guide the user what it, or what it should be filled most often, so I define its default value in the next line default: Experiment title . I want it to be editable in the GUI. Therefore, I should define it further by annotations. Which annotation? I now now it is related to ELNs, and it is going to be an editable string quantity, so with some intuition and refering to NOMAD documentation and checking other schemas, I write, and care for the indentations. Name_gbu : type : str default : Experiment title m_annotations : eln : component : StringEditQuantity Now let's inspect what subsections does my Experiment_Information_gbu have. The Experiment_Information_gbu has 3 subsections, each of the 3 being a section itself (guideline 4), and therefore all the guidelines 2-6 apply to each of the 3 subsections, individually.","title":"Guidelines for Building a Custom ELN Schema"},{"location":"T16_8/T16_8_write_a_custom_parser.html","text":"It is very common to export measurement data into a tabular format such as .csv or .xlsx . Following, we'll explore how to utilize NOMAD's tabular parser effectively to enhance our data documentation and visualization. Our objectives are: To upload our .csv or .xlsx data files onto NOMAD as entries , so that we can visualize and publish them and make it possible to get a DOI. Enhance our custom schema by making NOMAD parse the data within these files, and then visualize the data in plots that can be viewed in our customized ELN. NOMAD offers a versatile tabular parser that can be configured to process tabular data with different representations: Column Mode: each column contains an array of cells that we want to parse into one quantity. Example: current and voltage arrays to be plotted as x and y. Row Mode : each row contains a set of cells that we want to parse into a section, i.e., a set of quantities. Example: an inventory tabular data file (for substrates, precursors, or more) where each column represents a property and each row corresponds to one unit stored in the inventory. More details on the different representations of tabular data can be found in NOMAD documentation on how to parse tabular data . Steps to Utilize NOMAD's Tabular Parser for .csv Data \u00b6 We use an example .csv file, which is the output of an optical absorption instrument. You can find the P3HT_optical.csv file in tutorial_16_materials/part_4_files or download it here . We open this file using Notepad and have a quick look: In this .csv file: Headers are Wavelength and Absorbance . Line 2 gives the units, that we will not need, because we manually define them in the schema. Then we have the values for Wavelength and Absorbance, in column mode, as an array. The seperator is: , Knowing this, we continue to utilize the NOMAD parser with following steps. Step 1: Defining and Saving the Schema File \u00b6 Let's start by creating a new schema file with the .archive.yaml format, and create a section called Optical_absorption. definitions : name : This is a parser for optical absorption data in the .csv format sections : Optical_absorption : Step 2: Adding the Needed Base Sections \u00b6 The next step is to inherit the base sections to meet our ELN needs. To create entries from this schema we will use nomad.datamodel.data.EntryData To use the tabular parser we will use nomad.parsing.tabular.TableData To enable the plot function we will use nomad.datamodel.metainfo.plot.PlotSection remember, the NOMAD syntax to include sections to inherit from, was base_sections: , and also care for the indentation, base_sections should be indented with respect to the 'Optical_absorption'. base_sections : - nomad.datamodel.data.EntryData - nomad.parsing.tabular.TableData - nomad.datamodel.metainfo.plot.PlotSection Step 3: Defining the Quantities of Our Schema \u00b6 We will define the quantities in our ELN schema. Three quantities are needed, let's call them: data_file to upload the data file and apply the tabular parser. wavelength to store x-axis values extracted by the parser. absorption to tore y-axis values extracted by the parser. and give them a proper type and shape attribute. quantities : data_file : type : str wavelength : type : np.float64 unit : nm shape : [ '*' ] absorbance : type : np.float64 shape : [ '*' ] Step 4: Instructing NOMAD on How to Treat Different Quantities \u00b6 Remember, the syntax for this purpose was m_annotations: The data_file quantity: The first one is to instruct NOMAD to allow for droping and selecting files in this quantity. Here we will use the following: eln : component : FileEditQuantity The second one is to instruct NOMAD to open the operating system's data browser to select files: browser : adaptor : RawFileAdaptor The third one instructs NOMAD to apply the tabular parser to extract the data from the uploaded file: tabular_parser : parsing_options : comment : '#' skiprows : [ 1 ] mapping_options : - mapping_mode : column file_mode : current_entry sections : - '#root' The value of skiprows can be an integer (e.g., n) or a list of integers. If this is an integer, the parser skips that number of rows and starts from the next one (n+1). If this is a list (e.g., [m, n]), the parser skips the (m+1)th and (n+1)th rows (Python list). Here we have [1], meaning that the 2nd row (the units) will be skipped. We required that, because we needed capture the rest of the column as float numbers. So we will annotate the data_file as following: m_annotations : eln : component : FileEditQuantity browser : adaptor : RawFileAdaptor tabular_parser : parsing_options : comment : '#' skiprows : [ 1 ] mapping_options : - mapping_mode : column file_mode : current_entry sections : - '#root' The wavelength quantity: This quantitiy will accept values, that will be extracted by the tabular parser. Therefore the annotation will be: m_annotations : tabular : name : Wavelength Note that the value for the name key must be exactly written as the header of the column that we want to capture its values and put in the wavelength quantity we defined in the schema. The absorbance quantity: m_annotations : tabular : name : Absorbance Again note that the value for the name key must be exactly written as the header of the column that we want to capture its values and put in the absorbance quantity we defined in the schema. Step 5: Creating a Plot for Your Data \u00b6 To visualize the data from the uploaded and parsed file within the ELN, we will use an annotation for the main section of our schema Optical_absorption . By using the plotly_graph_object annotation we instruct NOMAD which quanty should be used for the x-axis and which quanty for the y-axis (can also be several quantities, showing several curves in one plot), as well as provide the title of the plot. Within the plotly_graph_object annotation, the data key defines the quantites for each axis. Here, these varaiable names match those which are defined in the schema. Finally, plot's title is set using the layout key. m_annotations : plotly_graph_object : data : x : \"#wavelength\" y : \"#absorbance\" layout : title : Optical Spectrum Note that here, the graph object belongs to the Optical_absorption section definition. Therefore, the m_annotations: must be at the same hierarchy level as quantities , and base_sections . Step 6 (optional): Adding a Free Text Field \u00b6 If you only want to publish your data and graph, consider adding a short description. To do this, select a free text field from editable quantities and add it to your schema. For example: info_about_data : type : str m_annotations : eln : component : RichTextEditQuantity Finally our custom schema file should look like the following. You can also find the optical_absorptoion_plot_schema.archive.yaml file in tutorial_16_materials/part_4_files or download it here . definitions : name : This is a parser for optical absorption data in the .csv format sections : Optical_absorption : base_sections : - nomad.datamodel.data.EntryData - nomad.parsing.tabular.TableData - nomad.datamodel.metainfo.plot.PlotSection quantities : info_about_data : type : str m_annotations : eln : component : RichTextEditQuantity data_file : type : str m_annotations : eln : component : FileEditQuantity browser : adaptor : RawFileAdaptor tabular_parser : parsing_options : comment : '#' skiprows : [ 1 ] mapping_options : - mapping_mode : column file_mode : current_entry sections : - '#root' wavelength : type : np.float64 unit : nm shape : [ '*' ] m_annotations : tabular : name : Wavelength absorbance : type : np.float64 shape : [ '*' ] m_annotations : tabular : name : Absorbance m_annotations : plotly_graph_object : data : x : \"#wavelength\" y : \"#absorbance\" layout : title : Optical Spectrum Step 7: Uploading the Schema File to NOMAD and Creating an Entry \u00b6 Now that we have created the ELN schema file for parsing the optical absorption data file, let's put it to the test in the NOMAD GUI. Example: Adding Plot to the Polymer Processing custom schema (Steps) Now, let's enhance our Polymer Processing schema to include the tabular parser and the plot. We already made the following custom schema polymer_processing_schema.archive.yaml . You simply copy the snippet or download it here . definitions : name : Processing and characterization of polymers thin-films, given by user (gbu) sections : Experiment_Information_gbu : base_sections : - nomad.datamodel.data.EntryData quantities : Name_gbu : type : str default : Experiment title m_annotations : eln : component : StringEditQuantity Researcher_gbu : type : str default : Name of the researcher who performed the experiment m_annotations : eln : component : StringEditQuantity Date_gbu : type : Datetime m_annotations : eln : component : DateTimeEditQuantity Additional_Notes_gbu : type : str m_annotations : eln : component : RichTextEditQuantity sub_sections : Sample_gbu : section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample m_annotations : eln : overview : true hide : [ 'chemical_formula' ] Solution_gbu : section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample m_annotations : eln : overview : true hide : [ 'chemical_formula' , 'description' ] quantities : Concentration_gbu : type : np.float64 unit : mg/ml m_annotations : eln : component : NumberEditQuantity sub_sections : Solute : section : base_sections : - nomad.datamodel.data.EntryData quantities : Substance_gbu : type : nomad.datamodel.metainfo.eln.ELNSubstance m_annotations : eln : component : ReferenceEditQuantity Mass_gbu : type : float unit : kilogram m_annotations : eln : component : NumberEditQuantity defaultDisplayUnit : milligram Solvent_gbu : section : base_sections : - nomad.datamodel.data.EntryData quantities : substance_gbu : type : nomad.datamodel.metainfo.eln.ELNSubstance m_annotations : eln : component : ReferenceEditQuantity Volume_gbu : type : float unit : meter ** 3 m_annotations : eln : component : NumberEditQuantity defaultDisplayUnit : milliliter Preparation_gbu : section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Process m_annotations : eln : overview : true We can add the tabular parser and the plot in various places. Here, for the sake of simplicity, we add it as a subsection of the main section, at the same hierarchy level of Sample_gbu , Solution_gbu , and Preparation_gbu . Since it will be itself a section (subsection is a section itself), we should give a section definition using the key section: (see guideline 4 for building custom ELN schemas). Optical_absorption : section : and then copy and paste everything else (starting from 'base_sections:'), one level indented with respect to section: . Optionally, we can benefit from a more specialized NOMAD base section nomad.datamodel.metainfo.basesections.Measurement instead of nomad.datamodel.data.EntryData . This gives us more functionalities than just making an entry. You can also find the polymer_processing_and_optical_absorptoion_plot_schema.archive.yaml file in tutorial_16_materials/part_4_files or download it here .","title":"Use Tabular Parser"},{"location":"T16_8/T16_8_write_a_custom_parser.html#steps-to-utilize-nomads-tabular-parser-for-csv-data","text":"We use an example .csv file, which is the output of an optical absorption instrument. You can find the P3HT_optical.csv file in tutorial_16_materials/part_4_files or download it here . We open this file using Notepad and have a quick look: In this .csv file: Headers are Wavelength and Absorbance . Line 2 gives the units, that we will not need, because we manually define them in the schema. Then we have the values for Wavelength and Absorbance, in column mode, as an array. The seperator is: , Knowing this, we continue to utilize the NOMAD parser with following steps.","title":"Steps to Utilize NOMAD's Tabular Parser for .csv Data"},{"location":"T16_8/T16_8_write_a_custom_parser.html#step-1-defining-and-saving-the-schema-file","text":"Let's start by creating a new schema file with the .archive.yaml format, and create a section called Optical_absorption. definitions : name : This is a parser for optical absorption data in the .csv format sections : Optical_absorption :","title":"Step 1: Defining and Saving the Schema File"},{"location":"T16_8/T16_8_write_a_custom_parser.html#step-2-adding-the-needed-base-sections","text":"The next step is to inherit the base sections to meet our ELN needs. To create entries from this schema we will use nomad.datamodel.data.EntryData To use the tabular parser we will use nomad.parsing.tabular.TableData To enable the plot function we will use nomad.datamodel.metainfo.plot.PlotSection remember, the NOMAD syntax to include sections to inherit from, was base_sections: , and also care for the indentation, base_sections should be indented with respect to the 'Optical_absorption'. base_sections : - nomad.datamodel.data.EntryData - nomad.parsing.tabular.TableData - nomad.datamodel.metainfo.plot.PlotSection","title":"Step 2: Adding the Needed Base Sections"},{"location":"T16_8/T16_8_write_a_custom_parser.html#step-3-defining-the-quantities-of-our-schema","text":"We will define the quantities in our ELN schema. Three quantities are needed, let's call them: data_file to upload the data file and apply the tabular parser. wavelength to store x-axis values extracted by the parser. absorption to tore y-axis values extracted by the parser. and give them a proper type and shape attribute. quantities : data_file : type : str wavelength : type : np.float64 unit : nm shape : [ '*' ] absorbance : type : np.float64 shape : [ '*' ]","title":"Step 3: Defining the Quantities of Our Schema"},{"location":"T16_8/T16_8_write_a_custom_parser.html#step-4-instructing-nomad-on-how-to-treat-different-quantities","text":"Remember, the syntax for this purpose was m_annotations: The data_file quantity: The first one is to instruct NOMAD to allow for droping and selecting files in this quantity. Here we will use the following: eln : component : FileEditQuantity The second one is to instruct NOMAD to open the operating system's data browser to select files: browser : adaptor : RawFileAdaptor The third one instructs NOMAD to apply the tabular parser to extract the data from the uploaded file: tabular_parser : parsing_options : comment : '#' skiprows : [ 1 ] mapping_options : - mapping_mode : column file_mode : current_entry sections : - '#root' The value of skiprows can be an integer (e.g., n) or a list of integers. If this is an integer, the parser skips that number of rows and starts from the next one (n+1). If this is a list (e.g., [m, n]), the parser skips the (m+1)th and (n+1)th rows (Python list). Here we have [1], meaning that the 2nd row (the units) will be skipped. We required that, because we needed capture the rest of the column as float numbers. So we will annotate the data_file as following: m_annotations : eln : component : FileEditQuantity browser : adaptor : RawFileAdaptor tabular_parser : parsing_options : comment : '#' skiprows : [ 1 ] mapping_options : - mapping_mode : column file_mode : current_entry sections : - '#root' The wavelength quantity: This quantitiy will accept values, that will be extracted by the tabular parser. Therefore the annotation will be: m_annotations : tabular : name : Wavelength Note that the value for the name key must be exactly written as the header of the column that we want to capture its values and put in the wavelength quantity we defined in the schema. The absorbance quantity: m_annotations : tabular : name : Absorbance Again note that the value for the name key must be exactly written as the header of the column that we want to capture its values and put in the absorbance quantity we defined in the schema.","title":"Step 4: Instructing NOMAD on How to Treat Different Quantities"},{"location":"T16_8/T16_8_write_a_custom_parser.html#step-5-creating-a-plot-for-your-data","text":"To visualize the data from the uploaded and parsed file within the ELN, we will use an annotation for the main section of our schema Optical_absorption . By using the plotly_graph_object annotation we instruct NOMAD which quanty should be used for the x-axis and which quanty for the y-axis (can also be several quantities, showing several curves in one plot), as well as provide the title of the plot. Within the plotly_graph_object annotation, the data key defines the quantites for each axis. Here, these varaiable names match those which are defined in the schema. Finally, plot's title is set using the layout key. m_annotations : plotly_graph_object : data : x : \"#wavelength\" y : \"#absorbance\" layout : title : Optical Spectrum Note that here, the graph object belongs to the Optical_absorption section definition. Therefore, the m_annotations: must be at the same hierarchy level as quantities , and base_sections .","title":"Step 5: Creating a Plot for Your Data"},{"location":"T16_8/T16_8_write_a_custom_parser.html#step-6-optional-adding-a-free-text-field","text":"If you only want to publish your data and graph, consider adding a short description. To do this, select a free text field from editable quantities and add it to your schema. For example: info_about_data : type : str m_annotations : eln : component : RichTextEditQuantity Finally our custom schema file should look like the following. You can also find the optical_absorptoion_plot_schema.archive.yaml file in tutorial_16_materials/part_4_files or download it here . definitions : name : This is a parser for optical absorption data in the .csv format sections : Optical_absorption : base_sections : - nomad.datamodel.data.EntryData - nomad.parsing.tabular.TableData - nomad.datamodel.metainfo.plot.PlotSection quantities : info_about_data : type : str m_annotations : eln : component : RichTextEditQuantity data_file : type : str m_annotations : eln : component : FileEditQuantity browser : adaptor : RawFileAdaptor tabular_parser : parsing_options : comment : '#' skiprows : [ 1 ] mapping_options : - mapping_mode : column file_mode : current_entry sections : - '#root' wavelength : type : np.float64 unit : nm shape : [ '*' ] m_annotations : tabular : name : Wavelength absorbance : type : np.float64 shape : [ '*' ] m_annotations : tabular : name : Absorbance m_annotations : plotly_graph_object : data : x : \"#wavelength\" y : \"#absorbance\" layout : title : Optical Spectrum","title":"Step 6 (optional): Adding a Free Text Field"},{"location":"T16_8/T16_8_write_a_custom_parser.html#step-7-uploading-the-schema-file-to-nomad-and-creating-an-entry","text":"Now that we have created the ELN schema file for parsing the optical absorption data file, let's put it to the test in the NOMAD GUI. Example: Adding Plot to the Polymer Processing custom schema (Steps) Now, let's enhance our Polymer Processing schema to include the tabular parser and the plot. We already made the following custom schema polymer_processing_schema.archive.yaml . You simply copy the snippet or download it here . definitions : name : Processing and characterization of polymers thin-films, given by user (gbu) sections : Experiment_Information_gbu : base_sections : - nomad.datamodel.data.EntryData quantities : Name_gbu : type : str default : Experiment title m_annotations : eln : component : StringEditQuantity Researcher_gbu : type : str default : Name of the researcher who performed the experiment m_annotations : eln : component : StringEditQuantity Date_gbu : type : Datetime m_annotations : eln : component : DateTimeEditQuantity Additional_Notes_gbu : type : str m_annotations : eln : component : RichTextEditQuantity sub_sections : Sample_gbu : section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample m_annotations : eln : overview : true hide : [ 'chemical_formula' ] Solution_gbu : section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Sample m_annotations : eln : overview : true hide : [ 'chemical_formula' , 'description' ] quantities : Concentration_gbu : type : np.float64 unit : mg/ml m_annotations : eln : component : NumberEditQuantity sub_sections : Solute : section : base_sections : - nomad.datamodel.data.EntryData quantities : Substance_gbu : type : nomad.datamodel.metainfo.eln.ELNSubstance m_annotations : eln : component : ReferenceEditQuantity Mass_gbu : type : float unit : kilogram m_annotations : eln : component : NumberEditQuantity defaultDisplayUnit : milligram Solvent_gbu : section : base_sections : - nomad.datamodel.data.EntryData quantities : substance_gbu : type : nomad.datamodel.metainfo.eln.ELNSubstance m_annotations : eln : component : ReferenceEditQuantity Volume_gbu : type : float unit : meter ** 3 m_annotations : eln : component : NumberEditQuantity defaultDisplayUnit : milliliter Preparation_gbu : section : base_sections : - nomad.datamodel.data.EntryData - nomad.datamodel.metainfo.eln.Process m_annotations : eln : overview : true We can add the tabular parser and the plot in various places. Here, for the sake of simplicity, we add it as a subsection of the main section, at the same hierarchy level of Sample_gbu , Solution_gbu , and Preparation_gbu . Since it will be itself a section (subsection is a section itself), we should give a section definition using the key section: (see guideline 4 for building custom ELN schemas). Optical_absorption : section : and then copy and paste everything else (starting from 'base_sections:'), one level indented with respect to section: . Optionally, we can benefit from a more specialized NOMAD base section nomad.datamodel.metainfo.basesections.Measurement instead of nomad.datamodel.data.EntryData . This gives us more functionalities than just making an entry. You can also find the polymer_processing_and_optical_absorptoion_plot_schema.archive.yaml file in tutorial_16_materials/part_4_files or download it here .","title":"Step 7: Uploading the Schema File to NOMAD and Creating an Entry"}]}